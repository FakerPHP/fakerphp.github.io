{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Faker","text":"<p>Faker is a PHP library that generates fake data for you. Whether you need to bootstrap your database, create good-looking XML documents, fill-in your persistence to stress test it, or anonymize data taken from a production service, Faker is for you.</p> <p>It's heavily inspired by Perl's Data::Faker, and by Ruby's Faker.</p>"},{"location":"#installation","title":"Installation","text":"<p>Faker requires PHP &gt;= 7.4.</p> <pre><code>composer require fakerphp/faker</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":""},{"location":"#autoloading","title":"Autoloading","text":"<p>Faker supports both <code>PSR-0</code> as <code>PSR-4</code> autoloaders.</p> <pre><code>// when installed via composer\nrequire_once 'vendor/autoload.php';</code></pre> <p>You can also load <code>Fakers</code> shipped <code>PSR-0</code> autoloader</p> <pre><code>// load Faker autoloader\nrequire_once '/path/to/Faker/src/autoload.php';</code></pre> <p>alternatively, you can use any other PSR-4 compliant autoloader</p>"},{"location":"#create-fake-data","title":"Create fake data","text":"<p>Use <code>Faker\\Factory::create()</code> to create and initialize a faker generator, which can generate data by calling methods named after the type of data you want.</p> <pre><code>require_once 'vendor/autoload.php';\n\n// use the factory to create a Faker\\Generator instance\n$faker = Faker\\Factory::create();\n// generate data by calling methods\necho $faker-&gt;name();\n// 'Vince Sporer'\necho $faker-&gt;email();\n// 'walter.sophia@hotmail.com'\necho $faker-&gt;text();\n// 'Numquam ut mollitia at consequuntur inventore dolorem.'</code></pre> <p>Each call to <code>$faker-&gt;name()</code> yields a different (random) result. This is because Faker uses <code>__call()</code> magic, and forwards <code>Faker\\Generator-&gt;$method()</code> calls to <code>Faker\\Generator-&gt;format($method, $attributes)</code>.</p> <pre><code>for ($i = 0; $i &lt; 3; $i++) {\n    echo $faker-&gt;name() . \"\\n\";\n}\n\n// 'Cyrus Boyle'\n// 'Alena Cummerata'\n// 'Orlo Bergstrom'</code></pre>"},{"location":"#modifiers","title":"Modifiers","text":"<p>Faker provides three special providers, <code>unique()</code>, <code>optional()</code>, and <code>valid()</code>, to be called before any provider.</p> <pre><code>// unique() forces providers to return unique values\n$values = [];\nfor ($i = 0; $i &lt; 10; $i++) {\n    // get a random digit, but always a new one, to avoid duplicates\n    $values []= $faker-&gt;unique()-&gt;randomDigit();\n}\nprint_r($values); // [4, 1, 8, 5, 0, 2, 6, 9, 7, 3]\n\n// providers with a limited range will throw an exception when no new unique value can be generated\n$values = [];\ntry {\n    for ($i = 0; $i &lt; 10; $i++) {\n        $values []= $faker-&gt;unique()-&gt;randomDigitNotNull();\n    }\n} catch (\\OverflowException $e) {\n    echo \"There are only 9 unique digits not null, Faker can't generate 10 of them!\";\n}\n\n// you can reset the unique modifier for all providers by passing true as first argument\n$faker-&gt;unique($reset = true)-&gt;randomDigitNotNull(); // will not throw OverflowException since unique() was reset\n// tip: unique() keeps one array of values per provider\n\n// optional() sometimes bypasses the provider to return a default value instead (which defaults to NULL)\n$values = [];\nfor ($i = 0; $i &lt; 10; $i++) {\n    // get a random digit, but also null sometimes\n    $values []= $faker-&gt;optional()-&gt;randomDigit();\n}\nprint_r($values); // [1, 4, null, 9, 5, null, null, 4, 6, null]\n\n// optional() accepts a weight argument to specify the probability of receiving the default value.\n// 0 will always return the default value; 1.0 will always return the provider. Default weight is 0.5 (50% chance).\n// Please note that the weight can be provided as float (0 / 1.0) or int (0 / 100)\n\n// As float\n$faker-&gt;optional($weight = 0.1)-&gt;randomDigit(); // 90% chance of NULL\n$faker-&gt;optional($weight = 0.9)-&gt;randomDigit(); // 10% chance of NULL\n\n// As int\n$faker-&gt;optional($weight = 10)-&gt;randomDigit; // 90% chance of NULL\n$faker-&gt;optional($weight = 100)-&gt;randomDigit; // 0% chance of NULL\n\n// optional() accepts a default argument to specify the default value to return.\n// Defaults to NULL.\n$faker-&gt;optional($weight = 0.5, $default = false)-&gt;randomDigit(); // 50% chance of FALSE\n$faker-&gt;optional($weight = 0.9, $default = 'abc')-&gt;word(); // 10% chance of 'abc'\n\n// valid() only accepts valid values according to the passed validator functions\n$values = [];\n$evenValidator = function($digit) {\n    return $digit % 2 === 0;\n};\nfor ($i = 0; $i &lt; 10; $i++) {\n    $values []= $faker-&gt;valid($evenValidator)-&gt;randomDigit();\n}\nprint_r($values); // [0, 4, 8, 4, 2, 6, 0, 8, 8, 6]\n\n// just like unique(), valid() throws an overflow exception when it can't generate a valid value\n$values = [];\ntry {\n    $faker-&gt;valid($evenValidator)-&gt;randomElement([1, 3, 5, 7, 9]);\n} catch (\\OverflowException $e) {\n    echo \"Can't pick an even number in that set!\";\n}</code></pre> <p>If you would like to use a modifier with a value not generated by Faker, use the <code>passthrough()</code> method. <code>passthrough()</code> simply returns whatever value it was given.</p> <pre><code>$faker-&gt;optional()-&gt;passthrough(mt_rand(5, 15));</code></pre>"},{"location":"#localization","title":"Localization","text":"<p><code>Faker\\Factory</code> can take a locale as an argument, to return localized data. If no localized provider is found, the factory falls back to the default locale (en_US).</p> <pre><code>// create a French faker\n$faker = Faker\\Factory::create('fr_FR');\nfor ($i = 0; $i &lt; 3; $i++) {\n    echo $faker-&gt;name() . \"\\n\";\n}\n\n// Luce du Coulon\n// Auguste Dupont\n// Roger Le Voisin</code></pre> <p>You can check available Faker locales in the source code, under the <code>Provider</code> directory. The localization of Faker is an ongoing process, for which we need your help. Don't hesitate to create localized providers to your own locale and submit a PR!</p>"},{"location":"#seeding-the-generator","title":"Seeding the Generator","text":"<p>You may want to always get the same generated data - for instance when using Faker for unit testing purposes. The generator offers a <code>seed()</code> method, which seeds the random number generator. Calling the same script twice with the same seed produces the same results.</p> <pre><code>$faker = Faker\\Factory::create();\n$faker-&gt;seed(1234);\n\necho $faker-&gt;name(); // 'Jess Mraz I';</code></pre> Tip <p>DateTime formatters won't reproduce the same fake data if you don't fix the <code>$max</code> value:</p> <pre><code>// even when seeded, this line will return different results because $max varies\n$faker-&gt;dateTime(); // equivalent to $faker-&gt;dateTime($max = 'now')\n// make sure you fix the $max parameter\n$faker-&gt;dateTime('2014-02-25 08:37:17'); // will return always the same date when seeded</code></pre> Tip <p>Formatters won't reproduce the same fake data if you use the <code>rand()</code> php function. Use <code>$faker</code> or <code>mt_rand()</code> instead:</p> <pre><code>// bad\n$faker-&gt;realText(rand(10, 20));\n// good\n$faker-&gt;realText($faker-&gt;numberBetween(10, 20));</code></pre>"},{"location":"#faker-internals-understanding-providers","title":"Faker Internals: Understanding Providers","text":"<p>A <code>Faker\\Generator</code> alone can't do much generation. It needs <code>Faker\\Provider</code> objects to delegate the data generation to them. <code>Faker\\Factory::create()</code> actually creates a <code>Faker\\Generator</code> bundled with the default providers. Here is what happens under the hood:</p> <pre><code>$faker = new Faker\\Generator();\n$faker-&gt;addProvider(new Faker\\Provider\\en_US\\Person($faker));\n$faker-&gt;addProvider(new Faker\\Provider\\en_US\\Address($faker));\n$faker-&gt;addProvider(new Faker\\Provider\\en_US\\PhoneNumber($faker));\n$faker-&gt;addProvider(new Faker\\Provider\\en_US\\Company($faker));\n$faker-&gt;addProvider(new Faker\\Provider\\Lorem($faker));\n$faker-&gt;addProvider(new Faker\\Provider\\Internet($faker));</code></pre> <p>Whenever you try to access a property on the <code>$faker</code> object, the generator looks for a method with the same name in all the providers attached to it. For instance, calling <code>$faker-&gt;name</code> triggers a call to <code>Faker\\Provider\\Person::name()</code>. And since Faker starts with the last provider, you can easily override existing formatters: just add a provider containing methods named after the formatters you want to override.</p> <p>That means that you can easily add your own providers to a <code>Faker\\Generator</code> instance. A provider is usually a class extending <code>\\Faker\\Provider\\Base</code>. This parent class allows you to use methods like <code>lexify()</code> or <code>randomNumber()</code>; it also gives you access to formatters of other providers, through the protected <code>$generator</code> property. The new formatters are the public methods of the provider class.</p> <p>Here is an example provider for populating Book data:</p> <pre><code>namespace Faker\\Provider;\n\nclass Book extends \\Faker\\Provider\\Base\n{\n  public function title($nbWords = 5)\n  {\n    $sentence = $this-&gt;generator-&gt;sentence($nbWords);\n    return substr($sentence, 0, strlen($sentence) - 1);\n  }\n\n  public function ISBN()\n  {\n    return $this-&gt;generator-&gt;ean13();\n  }\n}</code></pre> <p>To register this provider, just add a new instance of <code>\\Faker\\Provider\\Book</code> to an existing generator:</p> <pre><code>$faker-&gt;addProvider(new \\Faker\\Provider\\Book($faker));</code></pre> <p>Now you can use the two new formatters like any other Faker formatter:</p> <pre><code>$book = new Book();\n$book-&gt;setTitle($faker-&gt;title());\n$book-&gt;setISBN($faker-&gt;ISBN());\n$book-&gt;setSummary($faker-&gt;text());\n$book-&gt;setPrice($faker-&gt;randomNumber(2));</code></pre> Tip <p>A provider can also be a Plain Old PHP Object. In that case, all the public methods of the provider become available to the generator.</p>"},{"location":"#language-specific-formatters","title":"Language specific formatters","text":"<p>Supported locales can be found under the \"Locales\" header on the left.</p>"},{"location":"#misnamed-locales","title":"Misnamed locales","text":"Current name Correct name <code>at_AT</code> <code>de_AT</code> <code>zh_CN</code> <code>zh_Hans_CN</code> <code>zh_TW</code> <code>zh_Hant_TW</code> <p>Source: https://www.localeplanet.com/icu/</p>"},{"location":"#license","title":"License","text":"<p>Faker is released under the MIT License. See the bundled LICENSE file for details.</p>"},{"location":"formatters/","title":"Available Formatters","text":"<p>Each of the generator properties (like <code>name</code>, <code>address</code>, and <code>lorem</code>) are called \"formatters\". A faker generator has many of them, packaged in \"providers\". Here is a list of the bundled formatters in the default locale.</p> <p>In all examples, a Faker instance is made using the <code>en_US</code> default locale.</p> <pre><code>$faker = Faker\\Factory::create();</code></pre>"},{"location":"formatters/#fakerprovideren_usperson","title":"<code>Faker\\Provider\\en_US\\Person</code>","text":"<pre><code>title($gender = null|'male'|'female')     // 'Ms.'\ntitleMale()                               // 'Mr.'\ntitleFemale()                             // 'Ms.'\nsuffix()                                  // 'Jr.'\nname($gender = null|'male'|'female')      // 'Dr. Zane Stroman'\nfirstName($gender = null|'male'|'female') // 'Maynard'\nfirstNameMale()                           // 'Maynard'\nfirstNameFemale()                         // 'Rachel'\nlastName()                                // 'Zulauf'</code></pre>"},{"location":"formatters/#fakerprovideren_usaddress","title":"<code>Faker\\Provider\\en_US\\Address</code>","text":"<pre><code>cityPrefix()                       // 'Lake'\nsecondaryAddress()                 // 'Suite 961'\nstate()                            // 'NewMexico'\nstateAbbr()                        // 'OH'\ncitySuffix()                       // 'borough'\nstreetSuffix()                     // 'Keys'\nbuildingNumber()                   // '484'\ncity()                             // 'West Judge'\nstreetName()                       // 'Keegan Trail'\nstreetAddress()                    // '439 Karley Loaf Suite 897'\npostcode()                         // '17916'\naddress()                          // '8888 Cummings Vista Apt. 101, Susanbury, NY 95473'\ncountry()                          // 'Falkland Islands (Malvinas)'\nlatitude($min = -90, $max = 90)    // 77.147489\nlongitude($min = -180, $max = 180) // 86.211205</code></pre>"},{"location":"formatters/#fakerprovideren_usphonenumber","title":"<code>Faker\\Provider\\en_US\\PhoneNumber</code>","text":"<pre><code>phoneNumber()              // '827-986-5852'\nphoneNumberWithExtension() // '201-886-0269 x3767'\ntollFreePhoneNumber()      // '(888) 937-7238'\ne164PhoneNumber()          // '+27113456789'</code></pre>"},{"location":"formatters/#fakerprovideren_uscompany","title":"<code>Faker\\Provider\\en_US\\Company</code>","text":"<pre><code>catchPhrase()   // 'Monitored regional contingency'\nbs()            // 'e-enable robust architectures'\ncompany()       // 'Bogan-Treutel'\ncompanySuffix() // 'and Sons'\njobTitle()      // 'Cashier'</code></pre>"},{"location":"formatters/#fakerprovideren_ustext","title":"<code>Faker\\Provider\\en_US\\Text</code>","text":"<pre><code>realText($maxNbChars = 200, $indexSize = 2)\n// \"And yet I wish you could manage it?) 'And what are they made of?' Alice asked in a shrill, passionate voice. 'Would YOU like cats if you were never even spoke to Time!' 'Perhaps not,' Alice replied.\"\nrealTextBetween($minNbChars = 160, $maxNbChars = 200, $indexSize = 2)\n// \"VERY short remarks, and she ran across the garden, and I had not long to doubt, for the end of the bottle was NOT marked 'poison,' it is right?' 'In my youth,' Father William replied to his ear.\"</code></pre>"},{"location":"orm/","title":"ORM Integration","text":"<p>Faker provides adapters for Object-Relational and Object-Document Mappers (currently, Propel, Doctrine2, CakePHP, Spot2, Mandango and Eloquent are supported). These adapters ease the population of databases through the Entity classes provided by an ORM library (or the population of document stores using Document classes provided by an ODM library).</p> <p>To populate entities, create a new populator class (using a generator instance as parameter), then list the class and number of all the entities that must be generated. To launch the actual data population, call the <code>execute()</code> method.</p> <p>Note that some of the <code>populators</code> could require additional parameters. As example the <code>doctrine</code> populator has an option to specify its batchSize on how often it will flush the UnitOfWork to the database.</p> <p>Here is an example showing how to populate 5 <code>Author</code> and 10 <code>Book</code> objects:</p> <pre><code>$generator = \\Faker\\Factory::create();\n$populator = new \\Faker\\ORM\\Propel\\Populator($generator);\n$populator-&gt;addEntity('Author', 5);\n$populator-&gt;addEntity('Book', 10);\n$insertedPKs = $populator-&gt;execute();</code></pre> <p>The populator uses name and column type guessers to populate each column with relevant data. For instance, Faker populates a column named <code>first_name</code> using the <code>firstName</code> formatter, and a column with a <code>TIMESTAMP</code> type using the <code>dateTime</code> formatter. The resulting entities are therefore coherent. If Faker misinterprets a column name, you can still specify a custom closure to be used for populating a particular column, using the third argument to <code>addEntity()</code>:</p> <pre><code>$populator-&gt;addEntity('Book', 5, [\n  'ISBN' =&gt; function() use ($generator) { return $generator-&gt;ean13(); }\n]);</code></pre> <p>In this example, Faker will guess a formatter for all columns except <code>ISBN</code>, for which the given anonymous function will be used.</p> Tip <p>To ignore some columns, specify <code>null</code> for the column names in the third argument of <code>addEntity()</code>. This is usually necessary for columns added by a behavior:</p> <pre><code>$populator-&gt;addEntity('Book', 5, [\n  'CreatedAt' =&gt; null,\n  'UpdatedAt' =&gt; null,\n]);</code></pre> <p>Of course, Faker does not populate auto-incremented primary keys. In addition, <code>Faker\\ORM\\Propel\\Populator::execute()</code> returns the list of inserted PKs, indexed by class:</p> <pre><code>print_r($insertedPKs);\n// [\n//   'Author' =&gt; [34, 35, 36, 37, 38],\n//   'Book'   =&gt; [456, 457, 458, 459, 470, 471, 472, 473, 474, 475],\n// ]</code></pre> Note <p>Due to the fact that <code>Faker</code> returns all the primary keys inserted, the memory consumption will go up drastically when you do batch inserts due to the big list of data.</p> <p>In the previous example, the <code>Book</code> and <code>Author</code> models share a relationship. Since <code>Author</code> entities are populated first, Faker is smart enough to relate the populated <code>Book</code> entities to one of the populated <code>Author</code> entities.</p> <p>Lastly, if you want to execute an arbitrary function on an entity before insertion, use the fourth argument of the <code>addEntity()</code> method:</p> <pre><code>$populator-&gt;addEntity('Book', 5, [], [\n    function($book) {\n        $book-&gt;publish(); \n    },\n]);</code></pre>"},{"location":"third-party/","title":"Third-Party Libraries","text":"<ul> <li><code>aalaap/faker-youtube</code>: Faker for YouTube URLs in various formats</li> <li><code>bluemmb/faker-picsum-photos-provider</code>: Generate images using picsum.photos</li> <li><code>guidocella/eloquent-populator</code>: Adapter for Laravel's Eloquent ORM.</li> <li><code>jzonta/faker-restaurant</code>: Faker for Food and Beverage names generate</li> <li><code>league/factory-muffin</code>: enable the rapid creation of objects (PHP port of factory-girl)</li> <li><code>nelmio/alice</code>: Fixtures/object generator with a yaml DSL that can use Faker as data generator.</li> <li><code>ottaviano/faker-gravatar</code>: Generate avatars using Gravatar</li> <li><code>pelmered/fake-car</code>: Faker for cars and car data</li> <li><code>smknstd/fakerphp-picsum-images</code>: Generate images using picsum.photos (both image() and imageUrl())</li> <li><code>xvladqt/faker-lorem-flickr</code>: Generate images using loremflickr.com</li> <li><code>zenstruck/foundry</code>: Fixtures/object generator for Symfony that uses Faker as a data generator.</li> <li><code>jonpurvis/faker-stripe</code>: Generates fake, but structurally correct IDs for Stripe API resources.</li> </ul>"},{"location":"formatters/barcode/","title":"Barcode","text":""},{"location":"formatters/barcode/#ean13","title":"<code>ean13</code>","text":"<p>Generate a random EAN-13 barcode.</p> <pre><code>echo $faker-&gt;ean13();\n\n// '5803352818140', '4142935337533'</code></pre>"},{"location":"formatters/barcode/#ean8","title":"<code>ean8</code>","text":"<p>Generate a random EAN-8 barcode.</p> <pre><code>echo $faker-&gt;ean8();\n\n// '30272446', '00484527'</code></pre>"},{"location":"formatters/barcode/#isbn10","title":"<code>isbn10</code>","text":"<p>Generate a random ISBN-10 compliant <code>string</code>.</p> <pre><code>echo $faker-&gt;isbn10();\n\n// '4250151735', '8395066937'</code></pre>"},{"location":"formatters/barcode/#isbn13","title":"<code>isbn13</code>","text":"<p>Generate a random ISBN-13 compliant <code>string</code>.</p> <pre><code>echo $faker-&gt;isbn13();\n\n// '9786881116078', '9785625528412'</code></pre>"},{"location":"formatters/biased/","title":"Biased","text":""},{"location":"formatters/biased/#biasednumberbetween","title":"<code>biasedNumberBetween</code>","text":"<p>Generate a random <code>integer</code>, with a bias using a given function.</p> <pre><code>function biasedNumberBetween(\n    int $min = 0, \n    int $max = 100, \n    string $function = 'sqrt'\n): int;</code></pre> <p>Examples:</p> <pre><code>echo $faker-&gt;biasedNumberBetween(0, 20);\n\n// 14, 18, 12\n\necho $faker-&gt;biasedNumberBetween(0, 20, 'log');\n\n// 9, 4, 12</code></pre>"},{"location":"formatters/color/","title":"Color","text":""},{"location":"formatters/color/#hexcolor","title":"<code>hexColor</code>","text":"<p>Generate a random hex color.</p> <pre><code>$faker-&gt;hexColor();\n\n// '#ccd578', '#fafa11', '#ea3781'</code></pre>"},{"location":"formatters/color/#safehexcolor","title":"<code>safeHexColor</code>","text":"<p>Generate a random hex color, containing only 16 values per R, G and B.</p> <pre><code>$faker-&gt;safeHexColor();\n\n// '#00eecc', '#00ff88', '#00aaee'</code></pre>"},{"location":"formatters/color/#rgbcolorasarray","title":"<code>rgbColorAsArray</code>","text":"<p>Generate a random RGB color, as an <code>array</code>.</p> <pre><code>$faker-&gt;rgbColorAsArray();\n\n// [0 =&gt; 30, 1 =&gt; 22, 2 =&gt; 177], [0 =&gt; 150, 1 =&gt; 55, 2 =&gt; 34], [0 =&gt; 219, 1 =&gt; 253, 2 =&gt; 248]</code></pre>"},{"location":"formatters/color/#rgbcolor","title":"<code>rgbColor</code>","text":"<p>Generate a comma-separated RGB color <code>string</code>.</p> <pre><code>$faker-&gt;rgbColor();\n\n// '105,224,78', '97,249,98', '24,250,221'</code></pre>"},{"location":"formatters/color/#rgbcsscolor","title":"<code>rgbCssColor</code>","text":"<p>Generate a CSS-friendly RGB color <code>string</code>.</p> <pre><code>$faker-&gt;rgbCssColor();\n\n// 'rgb(9,110,101)', 'rgb(242,133,147)', 'rgb(124,64,0)'</code></pre>"},{"location":"formatters/color/#rgbacsscolor","title":"<code>rgbaCssColor</code>","text":"<p>Generate a CSS-friendly RGBA (alpha channel) color <code>string</code>.</p> <pre><code>$faker-&gt;rgbaCssColor();\n\n// 'rgba(179,65,209,1)', 'rgba(121,53,231,0.4)', 'rgba(161,239,152,0.9)'</code></pre>"},{"location":"formatters/color/#safecolorname","title":"<code>safeColorName</code>","text":"<p>Generate a CSS-friendly color name.</p> <pre><code>$faker-&gt;safeColorName();\n\n// 'white', 'fuchsia', 'purple'</code></pre>"},{"location":"formatters/color/#colorname","title":"<code>colorName</code>","text":"<p>Generate a CSS-friendly color name.</p> <pre><code>$faker-&gt;colorName();\n\n// 'SeaGreen', 'Crimson', 'DarkOliveGreen'</code></pre>"},{"location":"formatters/color/#hslcolor","title":"<code>hslColor</code>","text":"<p>Generate a random HSL color <code>string</code>.</p> <pre><code>$faker-&gt;hslColor();\n\n// '87,10,25', '94,24,27', '207,68,84'</code></pre>"},{"location":"formatters/color/#hslcolorasarray","title":"<code>hslColorAsArray</code>","text":"<p>Generate a random HSL color, as an <code>array</code>.</p> <pre><code>$faker-&gt;hslColorAsArray();\n\n// [0 =&gt; 311, 1 =&gt; 84, 2 =&gt; 31], [0 =&gt; 283, 1 =&gt; 85, 2 =&gt; 49], [0 =&gt; 57, 1 =&gt; 48, 2 =&gt; 36]</code></pre>"},{"location":"formatters/date-and-time/","title":"Date and Time","text":"<p>Methods accepting a <code>$timezone</code> argument default to <code>date_default_timezone_get()</code>. You can pass a custom timezone string to each method, or define a custom timezone for all time methods at once using <code>$faker::setDefaultTimezone($timezone)</code>.</p>"},{"location":"formatters/date-and-time/#unixtime","title":"<code>unixTime</code>","text":"<p>Generate an unix time between zero, and the given value. By default, <code>now</code> is used as input.</p> <p>Optionally, a parameter can be supplied containing a <code>DateTime</code>, <code>int</code> or <code>string</code>.</p> <pre><code>echo $faker-&gt;unixTime();\n\n// 1605544623, 1025544612\n\necho $faker-&gt;unixTime(new DateTime('+3 weeks'));\n\n// unix timestamp between 0 and the date 3 weeks from now.</code></pre>"},{"location":"formatters/date-and-time/#datetime","title":"<code>dateTime</code>","text":"<p>Generate a <code>DateTime</code> between January 1, 1970, and the given max. By default, <code>now</code> is used as max.</p> <p>Optionally, a parameter can be supplied containing a <code>DateTime</code>, <code>int</code> or <code>string</code>.</p> <p>An optional second parameter can be supplied, with the timezone.</p> <pre><code>echo $faker-&gt;dateTime();\n\n// DateTime: August 12, 1991 </code></pre>"},{"location":"formatters/date-and-time/#datetimead","title":"<code>dateTimeAD</code>","text":"<p>Generate a <code>DateTime</code> between January 1, 0001, and the given max. By default, <code>now</code> is used as max.</p> <p>An optional second parameter can be supplied, with the timezone.</p> <pre><code>echo $faker-&gt;dateTimeAD();\n\n// DateTime: September 19, 718</code></pre>"},{"location":"formatters/date-and-time/#iso8601","title":"<code>iso8601</code>","text":"<p>Generate an ISO8601 formatted <code>string</code> between January 1, 0001, and the given max. By default, <code>now</code> is used as max.</p> <pre><code>echo $faker-&gt;iso8601();</code></pre>"},{"location":"formatters/date-and-time/#date","title":"<code>date</code>","text":"<p>Generate a date <code>string</code>, with a given format and max value. By default, <code>'Y-m-d'</code> and <code>'now'</code> are used for the format and maximum value respectively.</p> <pre><code>echo $faker-&gt;date();\n\n// '1999-06-09'\n\necho $faker-&gt;date('Y_m_d');\n\n// '2011_02_19'</code></pre>"},{"location":"formatters/date-and-time/#time","title":"<code>time</code>","text":"<p>Generate a time <code>string</code>, with a given format and max value. By default, <code>H:i:s'</code> and <code>now</code> are used for the format and maximum value respectively.</p> <pre><code>echo $faker-&gt;time();\n\n// '12:02:50'\n\necho $faker-&gt;time('H_i_s');\n\n// '20_49_12'</code></pre>"},{"location":"formatters/date-and-time/#datetimebetween","title":"<code>dateTimeBetween</code>","text":"<p>Generate a <code>DateTime</code> between two dates. By default, <code>-30 years</code> and <code>now</code> are used.</p> <p>An optional third parameter can be supplied, with the timezone.</p> <pre><code>echo $faker-&gt;dateTimeBetween();\n\n// a date between -30 years ago, and now\n\necho $faker-&gt;dateTimeBetween('-1 week', '+1 week');\n\n// a date between -1 week ago, and 1 week from now</code></pre>"},{"location":"formatters/date-and-time/#datetimeininterval","title":"<code>dateTimeInInterval</code>","text":"<p>Generate a <code>DateTime</code> between a date and an interval from that date. By default, the date is set to <code>-30 years</code>, and the interval is set to <code>+5 days</code>.</p> <p>An optional third parameter can be supplied, with the timezone.</p> <pre><code>echo $faker-&gt;dateTimeInInterval();\n\n// a date between -30 years ago, and -30 years + 5 days\n\necho $faker-&gt;dateTimeInInterval('-1 week', '+3 days');\n\n// a date between -1 week ago, and -1 week + 3 days</code></pre>"},{"location":"formatters/date-and-time/#datetimethiscentury","title":"<code>dateTimeThisCentury</code>","text":"<p>Generate a <code>DateTime</code> that is within the current century. An optional <code>$max</code> value can be supplied, by default this is set to <code>now</code>.</p> <p>An optional second parameter can be supplied, with the timezone.</p> <pre><code>echo $faker-&gt;dateTimeThisCentury();\n\n// a date somewhere in this century\n\necho $faker-&gt;dateTimeThisCentury('+8 years');\n\n// a date somewhere in this century, with an upper bound of +8 years</code></pre>"},{"location":"formatters/date-and-time/#datetimethisdecade","title":"<code>dateTimeThisDecade</code>","text":"<p>Generate a <code>DateTime</code> that is within the current decade. An optional <code>$max</code> value can be supplied, by default this is set to <code>now</code>.</p> <p>An optional second parameter can be supplied, with the timezone.</p> <pre><code>echo $faker-&gt;dateTimeThisDecade();\n\n// a date somewhere in this decade\n\necho $faker-&gt;dateTimeThisDecade('+2 years');\n\n// a date somewhere in this decade, with an upper bound of +2 years</code></pre>"},{"location":"formatters/date-and-time/#datetimethisyear","title":"<code>dateTimeThisYear</code>","text":"<p>Generate a <code>DateTime</code> that is within the current year. An optional <code>$max</code> value can be supplied, by default this is set to <code>now</code>.</p> <p>An optional second parameter can be supplied, with the timezone.</p> <pre><code>echo $faker-&gt;dateTimeThisYear();\n\n// a date somewhere in this year\n\necho $faker-&gt;dateTimeThisYear('+2 months');\n\n// a date somewhere in this year, with an upper bound of +2 months</code></pre>"},{"location":"formatters/date-and-time/#datetimethismonth","title":"<code>dateTimeThisMonth</code>","text":"<p>Generate a <code>DateTime</code> that is within the current month. An optional <code>$max</code> value can be supplied, by default this is set to <code>now</code>.</p> <p>An optional second parameter can be supplied, with the timezone.</p> <pre><code>echo $faker-&gt;dateTimeThisMonth();\n\n// a date somewhere in this month\n\necho $faker-&gt;dateTimeThisMonth('+12 days');\n\n// a date somewhere in this month, with an upper bound of +12 days</code></pre>"},{"location":"formatters/date-and-time/#ampm","title":"<code>amPm</code>","text":"<p>Generate a random <code>DateTime</code>, with a given upper bound, and return the am/pm <code>string</code> value. By default, the upper bound is set to <code>now</code>.</p> <pre><code>echo $faker-&gt;amPm();\n\n// 'am'\n\necho $faker-&gt;amPm('+2 weeks');\n\n// 'pm'</code></pre>"},{"location":"formatters/date-and-time/#dayofmonth","title":"<code>dayOfMonth</code>","text":"<p>Generate a random <code>DateTime</code>, with a given upper bound, and return the day of month <code>string</code> value. By default, the upper bound is set to <code>now</code>.</p> <pre><code>echo $faker-&gt;dayOfMonth();\n\n// '24'\n\necho $faker-&gt;dayOfMonth('+2 weeks');\n\n// '05'</code></pre>"},{"location":"formatters/date-and-time/#dayofweek","title":"<code>dayOfWeek</code>","text":"<p>Generate a random <code>DateTime</code>, with a given upper bound, and return the day of week <code>string</code> value. By default, the upper bound is set to <code>now</code>.</p> <pre><code>echo $faker-&gt;dayOfWeek();\n\n// 'Tuesday'\n\necho $faker-&gt;dayOfWeek('+2 weeks');\n\n// 'Friday'</code></pre>"},{"location":"formatters/date-and-time/#month","title":"<code>month</code>","text":"<p>Generate a random <code>DateTime</code>, with a given upper bound, and return the month's number <code>string</code> value. By default, the upper bound is set to <code>now</code>.</p> <pre><code>echo $faker-&gt;month();\n\n// '9'\n\necho $faker-&gt;month('+10 weeks');\n\n// '7'</code></pre>"},{"location":"formatters/date-and-time/#monthname","title":"<code>monthName</code>","text":"<p>Generate a random <code>DateTime</code>, with a given upper bound, and return the month's name <code>string</code> value. By default, the upper bound is set to <code>now</code>.</p> <pre><code>echo $faker-&gt;monthName();\n\n// 'September'\n\necho $faker-&gt;monthName('+10 weeks');\n\n// 'April'</code></pre>"},{"location":"formatters/date-and-time/#year","title":"<code>year</code>","text":"<p>Generate a random <code>DateTime</code>, with a given upper bound, and return the year's <code>string</code> value. By default, the upper bound is set to <code>now</code>.</p> <pre><code>echo $faker-&gt;year();\n\n// '1998'\n\necho $faker-&gt;year('+10 years');\n\n// '2022'</code></pre>"},{"location":"formatters/date-and-time/#century","title":"<code>century</code>","text":"<p>Generate a random century name.</p> <pre><code>echo $faker-&gt;century();\n\n// 'IX', 'XVII', 'II'</code></pre>"},{"location":"formatters/date-and-time/#timezone","title":"<code>timezone</code>","text":"<p>Generate a random timezone name.</p> <pre><code>echo $faker-&gt;timezone();\n\n// 'Europe/Amsterdam', 'America/Montreal'\n\necho $faker-&gt;timezone('US');\n\n// 'America/New_York', 'America/Los_Angeles'</code></pre>"},{"location":"formatters/file/","title":"File","text":""},{"location":"formatters/file/#mimetype","title":"<code>mimeType</code>","text":"<p>Generate a random MIME-type <code>string</code>.</p> <pre><code>$faker-&gt;mimeType();\n\n// 'application/vnd.ms-artgalry', 'application/mods+xml', 'video/x-sgi-movie'</code></pre>"},{"location":"formatters/file/#fileextension","title":"<code>fileExtension</code>","text":"<p>Generate a random file extension type <code>string</code>.</p> <pre><code>$faker-&gt;fileExtension();\n\n// 'deb', 'mp4s', 'uvg'</code></pre>"},{"location":"formatters/file/#file_1","title":"<code>file</code>","text":"<p>Copy a random file from the source directory to the target directory and return the filename / relative path.</p> <pre><code>$faker-&gt;file('docs', 'site', true);\n\n// 'site/f6df6c74-2884-35c7-b802-6f96cf2ead01.md', 'site/423cfca4-709c-3942-8d66-34b08affd90b.md', 'site/c7a76943-e2cc-3c99-b75b-ac2df15cb3cf.md'\n\n$faker-&gt;file('docs', 'site', false);\n\n// 'c4cdee40-0eee-3172-9bca-bdafbb743c17.md', '88aef77e-040d-39a3-8f88-eca522f759ba.md', 'ecbee0e9-6fad-397b-88fb-d84704c7a71c.md'</code></pre>"},{"location":"formatters/html-lorem/","title":"HTML Lorem","text":""},{"location":"formatters/html-lorem/#randomhtml","title":"<code>randomHtml</code>","text":"<p>Generate a random HTML <code>string</code>, with a given maximum depth and width. By default, the depth and width are <code>4</code>.</p> <p>Depth defines the maximum depth of the body.</p> <p>Width defines the maximum of siblings each element can have.</p> <pre><code>echo $faker-&gt;randomHtml();\n\n// '&lt;html&gt;&lt;head&gt;&lt;title&gt;Laborum doloribus voluptatum vitae quia voluptatum ipsum veritatis.&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=\"example.org\" method=\"POST\"&gt;&lt;label for=\"username\"&gt;sit&lt;/label&gt;&lt;input type=\"text\" id=\"username\"&gt;&lt;label for=\"password\"&gt;amet&lt;/label&gt;&lt;input type=\"password\" id=\"password\"&gt;&lt;/form&gt;&lt;div class=\"et\"&gt;&lt;span&gt;Numquam magnam.&lt;/span&gt;&lt;p&gt;Neque facere consequuntur autem quisquam.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Veritatis sint.&lt;/li&gt;&lt;li&gt;Et ducimus.&lt;/li&gt;&lt;li&gt;Veniam accusamus cupiditate.&lt;/li&gt;&lt;li&gt;Eligendi eum et doloribus.&lt;/li&gt;&lt;li&gt;Voluptate ipsa dolores est.&lt;/li&gt;&lt;li&gt;Enim.&lt;/li&gt;&lt;li&gt;Dignissimos nostrum atque et excepturi.&lt;/li&gt;&lt;li&gt;Nisi veniam.&lt;/li&gt;&lt;li&gt;Voluptate nihil labore sapiente.&lt;/li&gt;&lt;li&gt;Ut.&lt;/li&gt;&lt;li&gt;Id suscipit.&lt;/li&gt;&lt;/ul&gt;&lt;i&gt;Qui tempora minima ad.&lt;/i&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;'\n\necho $faker-&gt;randomHtml(1, 1);\n\n// '&lt;html&gt;&lt;head&gt;&lt;title&gt;Architecto ut eius nisi molestiae atque ab.&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=\"example.net\" method=\"POST\"&gt;&lt;label for=\"username\"&gt;saepe&lt;/label&gt;&lt;input type=\"text\" id=\"username\"&gt;&lt;label for=\"password\"&gt;est&lt;/label&gt;&lt;input type=\"password\" id=\"password\"&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;'</code></pre>"},{"location":"formatters/image/","title":"Image","text":"<p>Placeholder.com has shut down</p> <p>As a result, this formatter will no longer function.</p> <p>Using any of the methods documented below will result in an error.</p>"},{"location":"formatters/image/#imageurl","title":"<code>imageUrl</code>","text":"<p>Get a random image URL from placeholder.com.</p> <p>To provide a less verbose explanation of this function, we'll use a function definition here:</p> <pre><code>function imageUrl(\n    int $width = 640,\n    int $height = 480,\n    ?string $category = null, /* used as text on the image */\n    bool $randomize = true,\n    ?string $word = null,\n    bool $gray = false,\n    string $format = 'png'\n): string;</code></pre> <p>Below, a few examples of possible parameter combinations:</p> <pre><code>echo $faker-&gt;imageUrl(640, 480, 'animals', true);\n\n// 'https://via.placeholder.com/640x480.png/004466?text=animals+omnis'\n\necho $faker-&gt;imageUrl(360, 360, 'animals', true, 'cats');\n\n// 'https://via.placeholder.com/360x360.png/00bbcc?text=animals+cats+vero'\n\necho $faker-&gt;imageUrl(360, 360, 'animals', true, 'dogs', true);\n\n// https://via.placeholder.com/360x360.png/CCCCCC?text=animals+dogs+veniam\n\necho $faker-&gt;imageUrl(360, 360, 'animals', true, 'dogs', true, 'jpg');\n\n// https://via.placeholder.com/360x360.jpg/CCCCCC?text=animals+dogs+veniam</code></pre>"},{"location":"formatters/image/#image_1","title":"<code>image</code>","text":"<p>Get a random <code>image</code> from placeholder.com and download it to a directory (<code>$dir</code>). The full path of the image is returned as a <code>string</code>.</p> <p>All the parameters are the same as <code>imageUrl</code>. Except an extra first parameter, this defines where the image should be stored.</p> <pre><code>function image(\n    ?string $dir = null,\n    int $width = 640,\n    int $height = 480,\n    ?string $category = null,\n    bool $fullPath = true,\n    bool $randomize = true,\n    ?string $word = null,\n    bool $gray = false,\n    string $format = 'png'\n)</code></pre> <p>Below, a few examples of possible parameter combinations:</p> <pre><code>echo $faker-&gt;image(null, 640, 480);\n\n// '/tmp/309fd63646f6d781848850277c14aef2.png'\n\necho $faker-&gt;image(null, 360, 360, 'animals', true);\n\n// '/tmp/4d2666e5968e10350428e3ed64de9175.png'\n\necho $faker-&gt;image(null, 360, 360, 'animals', true, true, 'cats', true);\n\n// '/tmp/9444227f06f0b024a14688ef3b31fe7a.png'\n\necho $faker-&gt;image(null, 360, 360, 'animals', true, true, 'cats', true, 'jpg');\n\n// '/tmp/9444227f06f0b024a14688ef3b31fe7a.jpg'</code></pre>"},{"location":"formatters/internet/","title":"Internet","text":""},{"location":"formatters/internet/#email","title":"<code>email</code>","text":"<p>Generate an email address.</p> <pre><code>echo $faker-&gt;email();\n\n// 'orval.treutel@blick.com', 'hickle.lavern@erdman.com'</code></pre>"},{"location":"formatters/internet/#safeemail","title":"<code>safeEmail</code>","text":"<p>Generate a safe email address.</p> <pre><code>echo $faker-&gt;safeEmail();\n\n// 'spencer.ricardo@example.com', 'wolf.sabryna@example.org'</code></pre>"},{"location":"formatters/internet/#freeemail","title":"<code>freeEmail</code>","text":"<p>Generate a free email address (free, as in, free sign-up).</p> <pre><code>echo $faker-&gt;freeEmail();\n\n// 'marcelino.hyatt@yahoo.com', 'abby81@gmail.com'</code></pre>"},{"location":"formatters/internet/#companyemail","title":"<code>companyEmail</code>","text":"<p>Generate a company email.</p> <pre><code>echo $faker-&gt;companyEmail();\n\n// 'hschinner@reinger.net', 'paula.blick@hessel.com'</code></pre>"},{"location":"formatters/internet/#freeemaildomain","title":"<code>freeEmailDomain</code>","text":"<p>Generate a free email domain name.</p> <pre><code>echo $faker-&gt;freeEmailDomain();\n\n// 'gmail.com', 'hotmail.com'</code></pre>"},{"location":"formatters/internet/#safeemaildomain","title":"<code>safeEmailDomain</code>","text":"<p>Generate a safe email domain.</p> <pre><code>echo $faker-&gt;safeEmailDomain();\n\n// 'example.net', 'example.org'</code></pre>"},{"location":"formatters/internet/#username","title":"<code>userName</code>","text":"<p>Generate a username.</p> <pre><code>echo $faker-&gt;userName();\n\n// 'ipaucek', 'homenick.alexandre'</code></pre>"},{"location":"formatters/internet/#password","title":"<code>password</code>","text":"<p>Generate a password, with a given minimum and maximum length. By default, the values <code>6</code> and <code>20</code> are used for the minimum and maximum respectively.</p> <pre><code>echo $faker-&gt;password();\n\n// 'dE1U[G$n4g%-Eie[]rn[', '-YCc1t|NSh)U&amp;j6Z'\n\necho $faker-&gt;password(2, 6);\n\n// 'GK,M|', '/ZG.'</code></pre>"},{"location":"formatters/internet/#domainname","title":"<code>domainName</code>","text":"<p>Generate a domain name.</p> <pre><code>echo $faker-&gt;domainName();\n\n// 'toy.com', 'schamberger.biz'</code></pre>"},{"location":"formatters/internet/#domainword","title":"<code>domainWord</code>","text":"<p>Generate a domain word.</p> <pre><code>echo $faker-&gt;domainWord();\n\n// 'feil', 'wintheiser'</code></pre>"},{"location":"formatters/internet/#tld","title":"<code>tld</code>","text":"<p>Generate a tld (top-level domain).</p> <pre><code>echo $faker-&gt;tld();\n\n// 'com', 'org'</code></pre>"},{"location":"formatters/internet/#url","title":"<code>url</code>","text":"<p>Generate a URL.</p> <pre><code>echo $faker-&gt;url();\n\n// 'http://cormier.info/eligendi-rem-omnis-quia.html', 'http://pagac.com/'</code></pre>"},{"location":"formatters/internet/#slug","title":"<code>slug</code>","text":"<p>Generate a slug, with a given amount of words. By default, the amount of words it set to 6.</p> <p>Optionally, a second parameter can be supplied. When <code>false</code>, only slugs with the given amount of words will be generated.</p> <pre><code>echo $faker-&gt;slug();\n\n// 'facere-ipsam-sit-aut-ut-dolorem', 'qui-soluta-sed-facilis-est-ratione-dolor-autem'\n\necho $faker-&gt;slug(2);\n\n// 'et-et-et', 'temporibus-iure'\n\necho $faker-&gt;slug(3, false);\n\n// 'ipsa-consectetur-est', 'quia-ad-nihil'</code></pre>"},{"location":"formatters/internet/#ipv4","title":"<code>ipv4</code>","text":"<p>Generate an IPv4 address.</p> <pre><code>echo $faker-&gt;ipv4();\n\n// '90.119.172.201', '84.172.232.19'</code></pre>"},{"location":"formatters/internet/#localipv4","title":"<code>localIpv4</code>","text":"<p>Generate an IPv4 address, inside a local subnet.</p> <pre><code>echo $faker-&gt;localIpv4();\n\n// '192.168.85.208', '192.168.217.138'</code></pre>"},{"location":"formatters/internet/#ipv6","title":"<code>ipv6</code>","text":"<p>Generate an IPv6 address.</p> <pre><code>echo $faker-&gt;ipv6();\n\n// 'c3f3:40ed:6d6c:4e8e:746b:887a:4551:42e5', '1c3d:a2cf:80ad:f2b6:7794:4f3f:f9fb:59cf'</code></pre>"},{"location":"formatters/internet/#macaddress","title":"<code>macAddress</code>","text":"<p>Generate a random MAC address.</p> <pre><code>echo $faker-&gt;macAddress();\n\n// '94:00:10:01:58:07', '0E:E1:48:29:2F:E2'</code></pre>"},{"location":"formatters/miscellaneous/","title":"Miscellaneous","text":""},{"location":"formatters/miscellaneous/#boolean","title":"<code>boolean</code>","text":"<p>Generate a random <code>bool</code>.</p> <p>Optionally, a float (between 0.0 and 1.0) or an integer (between 0 and 100) can be passed, which changes the chance of getting <code>true</code>.</p> <pre><code>// 50% chance of true\necho $faker-&gt;boolean(0.5);\n\n// true, true, false</code></pre>"},{"location":"formatters/miscellaneous/#md5","title":"<code>md5</code>","text":"<p>Generate a random MD5 hash <code>string</code>.</p> <pre><code>echo $faker-&gt;md5();\n\n// 'b1f447c2ee6029c7d2d8b3112ecfb160', '6d5d81469dfb247a15c9030d5aae38f1'</code></pre>"},{"location":"formatters/miscellaneous/#sha1","title":"<code>sha1</code>","text":"<p>Generate a random SHA-1 hash <code>string</code>.</p> <pre><code>echo $faker-&gt;sha1();\n\n// '20d1061c44ca4eef07e8d129c7000101b3e872af', '28cda1350140b3465ea8f65b933b1dad98ee5425'</code></pre>"},{"location":"formatters/miscellaneous/#sha256","title":"<code>sha256</code>","text":"<p>Generate a random SHA-256 hash <code>string</code>.</p> <pre><code>echo $faker-&gt;sha256();\n\n// 'bfa80759a5c40a8dd6694a3752bac231ae49c136396427815b0e33bd10974919'</code></pre>"},{"location":"formatters/miscellaneous/#locale","title":"<code>locale</code>","text":"<p>Generate a random locale <code>string</code>.</p> <pre><code>echo $faker-&gt;locale();\n\n// 'ln_CD', 'te_IN', 'sh_BA'</code></pre>"},{"location":"formatters/miscellaneous/#countrycode","title":"<code>countryCode</code>","text":"<p>Generate a random two-letter country code <code>string</code>.</p> <pre><code>echo $faker-&gt;countryCode();\n\n// 'LK', 'UM', 'CZ'</code></pre>"},{"location":"formatters/miscellaneous/#countryisoalpha3","title":"<code>countryISOAlpha3</code>","text":"<p>Generate a random three-letter country code <code>string</code>.</p> <pre><code>echo $faker-&gt;countryISOAlpha3();\n\n// 'ZAF', 'UKR', 'MHL'</code></pre>"},{"location":"formatters/miscellaneous/#languagecode","title":"<code>languageCode</code>","text":"<p>Generate a random two-letter language code <code>string</code>.</p> <pre><code>echo $faker-&gt;languageCode();\n\n// 'av', 'sc', 'as'</code></pre>"},{"location":"formatters/miscellaneous/#currencycode","title":"<code>currencyCode</code>","text":"<p>Generate a random currency code <code>string</code>.</p> <pre><code>echo $faker-&gt;currencyCode();\n\n// 'AED', 'SAR', 'KZT'</code></pre>"},{"location":"formatters/miscellaneous/#emoji","title":"<code>emoji</code>","text":"<p>Generate a random emoji.</p> <pre><code>echo $faker-&gt;emoji();\n\n// '\ud83d\ude26', '\ud83d\ude0e', '\ud83d\ude22'</code></pre>"},{"location":"formatters/numbers-and-strings/","title":"Numbers and Strings","text":""},{"location":"formatters/numbers-and-strings/#randomdigit","title":"<code>randomDigit</code>","text":"<p>Generates a random integer from 0 until 9.</p> <pre><code>echo $faker-&gt;randomDigit();\n\n// an integer between 0 and 9</code></pre>"},{"location":"formatters/numbers-and-strings/#randomdigitnot","title":"<code>randomDigitNot</code>","text":"<p>Generates a random integer from 0 until 9, excluding a given number.</p> <pre><code>echo $faker-&gt;randomDigitNot(2);\n\n// 0, 1, 3, 4, 5, 6, 7, 8 or 9</code></pre>"},{"location":"formatters/numbers-and-strings/#randomdigitnotnull","title":"<code>randomDigitNotNull</code>","text":"<p>Generates a random integer from 1 until 9.</p> <pre><code>echo $faker-&gt;randomDigitNotNull();\n\n// an integer between 1 and 9</code></pre>"},{"location":"formatters/numbers-and-strings/#randomnumber","title":"<code>randomNumber</code>","text":"<p>Generates a random integer, containing between 0 and <code>$nbDigits</code> amount of digits. When the <code>$strict</code> parameter is <code>true</code>, it will only return integers with $nbDigits amount of digits.</p> <pre><code>echo $faker-&gt;randomNumber(5, false);\n\n// 123, 43, 19238, 5, or 1203\n\necho $faker-&gt;randomNumber(5, true);\n\n// 12643, 42931, or 32919</code></pre>"},{"location":"formatters/numbers-and-strings/#randomfloat","title":"<code>randomFloat</code>","text":"<p>Generates a random float. Optionally it's possible to specify the amount of decimals.</p> <p>The second and third parameters optionally specify a lower and upper bound respectively.</p> <pre><code>echo $faker-&gt;randomFloat();\n\n// 12.9830, 2193.1232312, 102.12\n\necho $faker-&gt;randomFloat(2);\n\n// 43.23, 1203.49, 3428.93\n\necho $faker-&gt;randomFloat(1, 20, 30);\n\n// 21.7, 27.2, 28.1</code></pre>"},{"location":"formatters/numbers-and-strings/#numberbetween","title":"<code>numberBetween</code>","text":"<p>Generates a random integer between <code>$min</code> and <code>$max</code>. By default, an integer is generated between <code>0</code> and <code>2,147,483,647</code> (32-bit integer).</p> <pre><code>echo $faker-&gt;numberBetween();\n\n// 120378987, 182, 102310983\n\necho $faker-&gt;numberBetween(0, 100);\n\n// 32, 87, 91, 13, 75</code></pre>"},{"location":"formatters/numbers-and-strings/#randomletter","title":"<code>randomLetter</code>","text":"<p>Generates a random character from the alphabet.</p> <pre><code>echo $faker-&gt;randomLetter();\n\n// 'h', 'i', 'q'</code></pre>"},{"location":"formatters/numbers-and-strings/#randomelements","title":"<code>randomElements</code>","text":"<p>Returns <code>$count</code> amount of random element from the given array, traversable, or enum. By default, the <code>$count</code> parameter is set to 1, when <code>null</code> a random number of elements is returned.</p> <pre><code>echo $faker-&gt;randomElements(['a', 'b', 'c', 'd', 'e']);\n\n// ['c']\n\necho $faker-&gt;randomElements(['a', 'b', 'c', 'd', 'e'], null);\n\n// ['c', 'a', 'e']\n\necho $faker-&gt;randomElements(new \\ArrayIterator(['a', 'b', 'c', 'd', 'e']));\n\n// ['c']\n\nenum Bar\n{\n    case A = 'a';\n    case B = 'b';\n    case C = 'c';\n    case D = 'd';\n    case E = 'e';\n}\n\necho $faker-&gt;randomElements(Bar::class);\n\n// ['c']\n\necho $faker-&gt;randomElements(['a', 'b', 'c', 'd', 'e'], 3);\n\n// ['a', 'd', 'e']</code></pre>"},{"location":"formatters/numbers-and-strings/#randomelement","title":"<code>randomElement</code>","text":"<p>Returns a random element from the given array, traversable, or enum.</p> <pre><code>echo $faker-&gt;randomElement(['a', 'b', 'c', 'd', 'e']);\n\n// 'c'\n\necho $faker-&gt;randomElement(new \\ArrayIterator(['a', 'b', 'c', 'd', 'e']));\n\n// 'c'\n\nenum Bar\n{\n    case A = 'a';\n    case B = 'b';\n    case C = 'c';\n    case D = 'd';\n    case E = 'e';\n}\n\necho $faker-&gt;randomElement(Bar::class);\n\n// 'c'</code></pre>"},{"location":"formatters/numbers-and-strings/#randomkey","title":"<code>randomKey</code>","text":"<p>Returns a random key from the given array.</p> <pre><code>echo $faker-&gt;randomKey(['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3]);\n\n// 'b'</code></pre>"},{"location":"formatters/numbers-and-strings/#shuffle","title":"<code>shuffle</code>","text":"<p>Returns a shuffled version of either an array or string.</p> <pre><code>echo $faker-&gt;shuffle('hello-world');\n\n// 'lrhoodl-ewl'\n\necho $faker-&gt;shuffle([1, 2, 3]);\n\n// [3, 1, 2]</code></pre>"},{"location":"formatters/numbers-and-strings/#numerify","title":"<code>numerify</code>","text":"<p>Generate a string where all <code>#</code> characters are replaced by digits between 0 and 9. By default, <code>###</code> is used as input.</p> <pre><code>echo $faker-&gt;numerify();\n\n// '912', '271', '109', '674'\n\necho $faker-&gt;numerify('user-####');\n\n// 'user-4928', 'user-3427', 'user-1280'</code></pre>"},{"location":"formatters/numbers-and-strings/#lexify","title":"<code>lexify</code>","text":"<p>Generate a string where all <code>?</code> characters are replaces with a random letter from the Latin alphabet. By default, <code>????</code> is used as input.</p> <pre><code>echo $faker-&gt;lexify();\n\n// 'sakh', 'qwei', 'adsj'\n\necho $faker-&gt;lexify('id-????');\n\n// 'id-xoqe', 'id-pqpq', 'id-zpeu'</code></pre>"},{"location":"formatters/numbers-and-strings/#bothify","title":"<code>bothify</code>","text":"<p>Generate a string where <code>?</code> characters are replaced with a random letter, <code>#</code> characters are replaced with a random digit between 0 and 9, and <code>*</code> characters are replaced with either a random letter or a random digit. By default, <code>## ??</code> is used as input.</p> <pre><code>echo $faker-&gt;bothify();\n\n// '46 hd', '19 ls', '75 pw'\n\necho $faker-&gt;bothify('?????-#####');\n\n// 'lsadj-10298', 'poiem-98342', 'lcnsz-42938'</code></pre>"},{"location":"formatters/numbers-and-strings/#asciify","title":"<code>asciify</code>","text":"<p>Generate a string where <code>*</code> characters are replaced with a random character from the ASCII table. By default, <code>****</code> is used as input.</p> <pre><code>echo $faker-&gt;asciify();\n\n// '%Y+!', '{&lt;\"B', 'kF^a'\n\necho $faker-&gt;asciify('user-****');\n\n// 'user-ntwx', 'user-PK`A', 'user-n`,X'</code></pre>"},{"location":"formatters/numbers-and-strings/#regexify","title":"<code>regexify</code>","text":"<p>Generate a random string based on a regex. By default, an empty string is used as input.</p> <pre><code>echo $faker-&gt;regexify();\n\n// ''\n\necho $faker-&gt;regexify('[A-Z]{5}[0-4]{3}');\n\n// 'DRSQX201', 'FUDPA404', 'CQVIU411'</code></pre>"},{"location":"formatters/payment/","title":"Payment","text":""},{"location":"formatters/payment/#creditcardtype","title":"<code>creditCardType</code>","text":"<p>Generate a credit card type.</p> <pre><code>echo $faker-&gt;creditCardType();\n\n// 'MasterCard', 'Visa'</code></pre>"},{"location":"formatters/payment/#creditcardnumber","title":"<code>creditCardNumber</code>","text":"<p>Generate a credit card number with a given type. By default, a random type is used. Supported types are 'Visa', ' MasterCard', 'American Express', and 'Discover Card'.</p> <p>Optionally, a second and third parameter may be supplied. These define if the credit card number should be formatted, and which separator to use.</p> <pre><code>echo $faker-&gt;creditCardNumber();\n\n// '4556817762319090', '5151791946409422'\n\necho $faker-&gt;creditCardNumber('Visa');\n\n// '4539710900519030', '4929494068680706'\n\necho $faker-&gt;creditCardNumber('Visa', true);\n\n// '4624-6303-5483-5433', '4916-3711-2654-8734'\n\necho $faker-&gt;creditCardNumber('Visa', true, '::');\n\n// '4539::6626::9844::3867', '4916::6161::0683::7022'</code></pre>"},{"location":"formatters/payment/#creditcardexpirationdate","title":"<code>creditCardExpirationDate</code>","text":"<p>Generate a credit card expiration date (<code>DateTime</code>). By default, only valid dates are generated. Potentially invalid dates can be generated by using <code>false</code> as input.</p> <pre><code>echo $faker-&gt;creditCardExpirationDate();\n\n// DateTime: between now and +36 months\n\necho $faker-&gt;creditCardExpirationDate(false);\n\n// DateTime: between -36 months and +36 months</code></pre>"},{"location":"formatters/payment/#creditcardexpirationdatestring","title":"<code>creditCardExpirationDateString</code>","text":"<p>Generate a credit card expiration date (<code>string</code>). By default, only valid dates are generated. Potentially invalid dates can be generated by using <code>false</code> as input.</p> <p>The string is formatted using <code>m/y</code>. Optionally, a second parameter can be passed to override this format.</p> <pre><code>echo $faker-&gt;creditCardExpirationDateString();\n\n// '09/23', '06/21'\n\necho $faker-&gt;creditCardExpirationDateString(false);\n\n// '01/18', '09/21'\n\necho $faker-&gt;creditCardExpirationDateString(true, 'm-Y');\n\n// '12-2020', '07-2023'</code></pre>"},{"location":"formatters/payment/#creditcarddetails","title":"<code>creditCardDetails</code>","text":"<p>Generate an <code>array</code> with credit card details. By default, only valid expiration dates will be generated. Potentially invalid expiration dates can be generated by using <code>false</code> as input.</p> <pre><code>echo $faker-&gt;creditCardDetails();\n\n// ['type' =&gt; 'Visa', 'number' =&gt; '4961616159985979', 'name' =&gt; 'Mr. Charley Greenfelder II', 'expirationDate' =&gt; '01/23']\n\necho $faker-&gt;creditCardDetails(false);\n\n// ['type' =&gt; 'MasterCard', 'number' =&gt; '2720381993865020', 'name' =&gt; 'Dr. Ivy Gerhold Jr.', 'expirationDate' =&gt; '10/18']</code></pre>"},{"location":"formatters/payment/#iban","title":"<code>iban</code>","text":"<p>Generate an <code>IBAN</code> string with a given country and bank code. By default, a random country and bank code will be used.</p> <p>The country code format should be ISO 3166-1 alpha-2.</p> <pre><code>echo $faker-&gt;iban();\n\n// 'LI2690204NV3C0BINN164', 'NL56ETEE3836179630'\n\necho $faker-&gt;iban('NL');\n\n// 'NL95ZOGL3572193597', 'NL76LTTM8016514526'\n\necho $faker-&gt;iban('NL', 'INGB');\n\n// 'NL11INGB2348102199', 'NL87INGB6409935479'</code></pre>"},{"location":"formatters/payment/#swiftbicnumber","title":"<code>swiftBicNumber</code>","text":"<p>Generate a random SWIFT/BIC number <code>string</code>.</p> <pre><code>echo $faker-&gt;swiftBicNumber();\n\n// 'OGFCTX2GRGN', 'QFKVLJB7'</code></pre>"},{"location":"formatters/text-and-paragraphs/","title":"Text and Paragraphs","text":""},{"location":"formatters/text-and-paragraphs/#word","title":"<code>word</code>","text":"<p>Generate a string containing random single word.</p> <pre><code>echo $faker-&gt;word();\n\n// 'molestiae', 'occaecati', 'distinctio'</code></pre>"},{"location":"formatters/text-and-paragraphs/#words","title":"<code>words</code>","text":"<p>Generate an array containing a specified amount of random words.</p> <p>Optionally, a second boolean parameter can be supplied. When <code>true</code>, a string will be returned instead of an array.</p> <pre><code>echo $faker-&gt;words();\n\n// ['praesentium', 'possimus', 'modi']\n\necho $faker-&gt;words(5);\n\n// ['molestias', 'repellendus', 'qui', 'temporibus', 'ut']\n\necho $faker-&gt;words(3, true);\n\n// 'placeat vero saepe'</code></pre>"},{"location":"formatters/text-and-paragraphs/#sentence","title":"<code>sentence</code>","text":"<p>Generate a sentence containing a given amount of words. By default, <code>6</code> words is used.</p> <p>Optionally, a second boolean parameter can be supplied. When <code>false</code>, only sentences with the given amount of words will be generated. By default, <code>sentence</code> will deviate from the given amount by +/- 40%.</p> <pre><code>echo $faker-&gt;sentence();\n\n// 'Sit vitae voluptas sint non voluptates.'\n\necho $faker-&gt;sentence(3);\n\n// 'Laboriosam non voluptas.'</code></pre>"},{"location":"formatters/text-and-paragraphs/#sentences","title":"<code>sentences</code>","text":"<p>Generate an array containing a given amount of sentences. By default, <code>3</code> sentences are generated.</p> <p>Optionally, a second boolean parameter can be supplied. When <code>true</code>, a string will be returned instead of an array.</p> <pre><code>echo $faker-&gt;sentences();\n\n// ['Optio quos qui illo error.', 'Laborum vero a officia id corporis.', 'Saepe provident esse hic eligendi.']\n\necho $faker-&gt;sentences(2);\n\n// ['Consequatur animi cumque.', 'Quibusdam eveniet ut.']</code></pre>"},{"location":"formatters/text-and-paragraphs/#paragraph","title":"<code>paragraph</code>","text":"<p>Generate a paragraph of text, containing a given amount of sentences. By default, <code>3</code> sentences are generated.</p> <p>Optionally, a second boolean parameter can be supplied. When <code>false</code>, only sentences with the given amount of words will be generated. By default, sentences will deviate from the default word length of 6 by +/- 40%.</p> <pre><code>echo $faker-&gt;paragraph();\n\n// 'Similique molestias exercitationem officia aut. Itaque doloribus et rerum voluptate iure. Unde veniam magni dignissimos expedita eius.'\n\necho $faker-&gt;paragraph(2);\n\n// 'Consequatur velit incidunt ipsam eius beatae. Est omnis autem illum iure.'\n\necho $faker-&gt;paragraph(2, false);\n\n// 'Laborum unde mollitia distinctio nam nihil. Quo expedita et exercitationem voluptas impedit.'</code></pre>"},{"location":"formatters/text-and-paragraphs/#paragraphs","title":"<code>paragraphs</code>","text":"<p>Generate an array containing a given amount of paragraphs. By default, <code>3</code> paragraphs are generated.</p> <p>Optionally, a second boolean parameter can be supplied. When <code>true</code>, a string will be returned instead of an array.</p> <pre><code>echo $faker-&gt;paragraphs();\n\n// [\n//     'Aperiam fugiat alias nobis sunt hic. Quasi dolore autem quo sapiente et distinctio. Dolor ipsum saepe quaerat possimus molestiae placeat iste.', \n//     'Et enim labore debitis consequatur id omnis. Dolorum qui id natus tenetur doloremque sed. Delectus et quis sit quod. Animi assumenda dolorum voluptate nobis aut.',\n//     'Voluptas quidem corporis non sed veritatis laudantium eaque modi. Quidem est et est deserunt. Voluptatem magni assumenda voluptas et qui delectus.'\n// ]\n\necho $faker-&gt;paragraphs(2);\n\n// [\n//     'Quasi nihil nisi enim omnis natus eum. Autem sed ea a maxime. Qui eaque doloribus sit et ab repellat. Aspernatur est rem ut.',\n//     'Corrupti quibusdam qui et excepturi. Fugiat minima soluta quae sunt. Aperiam adipisci quas minus eius.'\n// ]\n\necho $faker-&gt;paragraphs(2, true);\n\n// Quia odit et quia ab. Eos officia dolor aut quia et sed. Quis sint amet aut. Eius enim sint praesentium error quo sed eligendi. Quo id sint et amet dolorem rem maiores.\n//\n// Fuga atque velit consectetur id fugit eum. Cupiditate aut itaque dolores praesentium. Eius sunt ut ut ipsam.</code></pre>"},{"location":"formatters/text-and-paragraphs/#text","title":"<code>text</code>","text":"<p>Generate a random string of text. The first parameter represents the maximum number of characters the text should contain (by default, <code>200</code>).</p> <pre><code>echo $faker-&gt;text();\n\n// Omnis accusantium non ut dolor modi. Quo vel omnis eum velit aspernatur pariatur. Blanditiis nisi accusantium a deleniti. Nam aut dolorum aut officiis consequatur.\n\necho $faker-&gt;text(100);\n\n// Quaerat eveniet magni a optio. Officia facilis cupiditate fugiat earum ipsam nemo nulla.</code></pre>"},{"location":"formatters/user-agent/","title":"User Agent","text":""},{"location":"formatters/user-agent/#useragent","title":"<code>userAgent</code>","text":"<p>Generate a user agent.</p> <pre><code>echo $faker-&gt;userAgent();\n\n// 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/5350 (KHTML, like Gecko) Chrome/37.0.806.0 Mobile Safari/5350'</code></pre>"},{"location":"formatters/user-agent/#chrome","title":"<code>chrome</code>","text":"<p>Generate a user agent that belongs to Google Chrome.</p> <pre><code>echo $faker-&gt;chrome();\n\n// 'Mozilla/5.0 (Macintosh; PPC Mac OS X 10_8_1) AppleWebKit/5352 (KHTML, like Gecko) Chrome/40.0.848.0 Mobile Safari/5352'</code></pre>"},{"location":"formatters/user-agent/#firefox","title":"<code>firefox</code>","text":"<p>Generate a user agent that belongs to Mozilla Firefox.</p> <pre><code>echo $faker-&gt;firefox();\n\n// 'Mozilla/5.0 (X11; Linux i686; rv:7.0) Gecko/20121220 Firefox/35.0'</code></pre>"},{"location":"formatters/user-agent/#safari","title":"<code>safari</code>","text":"<p>Generate a user agent that belongs to Apple Safari.</p> <pre><code>echo $faker-&gt;safari();\n\n// 'Mozilla/5.0 (Macintosh; PPC Mac OS X 10_8_3 rv:5.0; sl-SI) AppleWebKit/532.33.2 (KHTML, like Gecko) Version/5.0 Safari/532.33.2'</code></pre>"},{"location":"formatters/user-agent/#opera","title":"<code>opera</code>","text":"<p>Generate a user agent that belongs to Opera.</p> <pre><code>echo $faker-&gt;opera();\n\n// 'Opera/8.55 (Windows 95; en-US) Presto/2.9.286 Version/11.00'</code></pre>"},{"location":"formatters/user-agent/#internetexplorer","title":"<code>internetExplorer</code>","text":"<p>Generate a user agent that belongs to Internet Explorer.</p> <pre><code>echo $faker-&gt;internetExplorer();\n\n// 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 5.0; Trident/5.1)'</code></pre>"},{"location":"formatters/user-agent/#msedge","title":"<code>msedge</code>","text":"<p>Generate a user agent that belongs to Microsoft Ege.</p> <pre><code>echo $faker-&gt;msedge();\n\n// 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36 Edg/99.0.1150.36'</code></pre>"},{"location":"formatters/uuid/","title":"UUID","text":""},{"location":"formatters/uuid/#uuid_1","title":"<code>uuid</code>","text":"<p>Generate a random UUID.</p> <pre><code>echo $faker-&gt;uuid();\n\n// 'bf91c434-dcf3-3a4c-b49a-12e0944ef1e2', '5b2c0654-de5e-3153-ac1f-751cac718e4e'</code></pre>"},{"location":"formatters/version/","title":"Version","text":""},{"location":"formatters/version/#semver","title":"<code>semver</code>","text":"<p>Generate a random semantic version v2.0.0 string.</p> <p>Optionally, the parameters <code>$preRelease</code> and <code>$build</code> can be set to <code>true</code> to randomly include pre-release and/or build parts into the version.</p> <p>Examples:</p> <pre><code>echo $faker-&gt;semver();\n\n// 0.0.1, 1.0.0, 9.99.99\n\necho $faker-&gt;semver(true, true);\n\n// 0.0.1-beta, 1.0.0-rc.1, 1.5.9+276e88b, 5.6.2-alpha.2+20180419085616</code></pre>"},{"location":"locales/ar_SA/","title":"Arabic (Saudi Arabia)","text":""},{"location":"locales/ar_SA/#fakerproviderar_saaddress","title":"<code>Faker\\Provider\\ar_SA\\Address</code>","text":"<pre><code>echo $faker-&gt;governorate(); // \"\u0645\u0646\u0637\u0642\u0629 \u0627\u0644\u062c\u0648\u0641\"\necho $faker-&gt;subdivision(); // \"\u0645\u0646\u0637\u0642\u0629 \u0627\u0644\u0631\u064a\u0627\u0636\"</code></pre>"},{"location":"locales/ar_SA/#fakerproviderar_sacompany","title":"<code>Faker\\Provider\\ar_SA\\Company</code>","text":"<pre><code>echo $faker-&gt;companyIdNumber(); // \"7008914645\"</code></pre>"},{"location":"locales/ar_SA/#fakerproviderar_sapayment","title":"<code>Faker\\Provider\\ar_SA\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"SA0218IBYZVZJSEC8536V4XC\"</code></pre>"},{"location":"locales/ar_SA/#fakerproviderar_saperson","title":"<code>Faker\\Provider\\ar_SA\\Person</code>","text":"<pre><code>echo $faker-&gt;idNumber();          // ID number\necho $faker-&gt;nationalIdNumber();  // Citizen ID number\necho $faker-&gt;foreignerIdNumber(); // Foreigner ID number</code></pre>"},{"location":"locales/bg_BG/","title":"Bulgarian (Bulgaria)","text":""},{"location":"locales/bg_BG/#fakerproviderbg_bgpayment","title":"<code>Faker\\Provider\\bg_BG\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"BG89ZHIA63939899TD7TC8\"\necho $faker-&gt;vat();               // \"BG 0123456789\" - Bulgarian Value Added Tax number\necho $faker-&gt;vat(false)();        // \"BG0123456789\" - unspaced Bulgarian Value Added Tax number</code></pre>"},{"location":"locales/bn_BD/","title":"Bangla (Bangladesh)","text":""},{"location":"locales/bn_BD/#fakerproviderbn_bdcompany","title":"<code>Faker\\Provider\\bn_BD\\Company</code>","text":"<pre><code>echo $faker-&gt;companyType(); // \"\u09b8\u09be\u09b0\"</code></pre>"},{"location":"locales/cs_CZ/","title":"Czech (Czech Republic)","text":""},{"location":"locales/cs_CZ/#fakerprovidercs_czaddress","title":"<code>Faker\\Provider\\cs_CZ\\Address</code>","text":"<pre><code>echo $faker-&gt;region(); // \"Libereck\u00fd kraj\"</code></pre>"},{"location":"locales/cs_CZ/#fakerprovidercs_czcompany","title":"<code>Faker\\Provider\\cs_CZ\\Company</code>","text":"<pre><code>// Generates a valid I\u010cO\necho $faker-&gt;ico(); // \"69663963\"</code></pre>"},{"location":"locales/cs_CZ/#fakerprovidercs_czdatetime","title":"<code>Faker\\Provider\\cs_CZ\\DateTime</code>","text":"<pre><code>echo $faker-&gt;monthNameGenitive(); // \"prosince\"\necho $faker-&gt;formattedDate(); // \"12. listopadu 2015\"</code></pre>"},{"location":"locales/cs_CZ/#fakerprovidercs_czpayment","title":"<code>Faker\\Provider\\cs_CZ\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"CZ2318941673853266249134\"</code></pre>"},{"location":"locales/cs_CZ/#fakerprovidercs_czperson","title":"<code>Faker\\Provider\\cs_CZ\\Person</code>","text":"<pre><code>echo $faker-&gt;birthNumber(); // \"7304243452\"</code></pre>"},{"location":"locales/da_DK/","title":"Danish (Denmark)","text":""},{"location":"locales/da_DK/#fakerproviderda_dkperson","title":"<code>Faker\\Provider\\da_DK\\Person</code>","text":"<pre><code>// Generates a random CPR number\necho $faker-&gt;cpr(); // \"051280-2387\"</code></pre>"},{"location":"locales/da_DK/#fakerproviderda_dkaddress","title":"<code>Faker\\Provider\\da_DK\\Address</code>","text":"<pre><code>// Generates a random 'kommune' name\necho $faker-&gt;kommune(); // \"Frederiksberg\"\n\n// Generates a random region name\necho $faker-&gt;region(); // \"Region Sj\u00e6lland\"</code></pre>"},{"location":"locales/da_DK/#fakerproviderda_dkcompany","title":"<code>Faker\\Provider\\da_DK\\Company</code>","text":"<pre><code>// Generates a random CVR number\necho $faker-&gt;cvr(); // \"32458723\"\n\n// Generates a random P number\necho $faker-&gt;p; // \"5398237590\"</code></pre>"},{"location":"locales/da_DK/#fakerproviderda_dkpayment","title":"<code>Faker\\Provider\\da_DK\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"DK4482839445577922\"</code></pre>"},{"location":"locales/de_AT/","title":"German (Austria)","text":""},{"location":"locales/de_AT/#fakerproviderde_ataddress","title":"<code>Faker\\Provider\\de_AT\\Address</code>","text":"<pre><code>echo $faker-&gt;state();           // \"Wien\"</code></pre>"},{"location":"locales/de_AT/#fakerproviderde_atpayment","title":"<code>Faker\\Provider\\de_AT\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"SA0218IBYZVZJSEC8536V4XC\"\necho $faker-&gt;vat();               // \"AT U12345678\" - Austrian Value Added Tax number\necho $faker-&gt;vat(false);          // \"ATU12345678\" - unspaced Austrian Value Added Tax number</code></pre>"},{"location":"locales/de_AT/#fakerproviderde_atperson","title":"<code>Faker\\Provider\\de_AT\\Person</code>","text":"<pre><code>echo $faker-&gt;ssn();                                  // \"3130231169\" - Austrian Social Security number\necho $faker-&gt;ssn(new \\DateTime('2010-09-08'));     // \"8235080910\" - Austrian Social Security number for a specific birth date</code></pre>"},{"location":"locales/de_CH/","title":"German (Switzerland)","text":""},{"location":"locales/de_CH/#fakerproviderde_chaddress","title":"<code>Faker\\Provider\\de_CH\\Address</code>","text":"<pre><code>echo $faker-&gt;canton();        // [\"GE\" =&gt; \"Genf\"]\necho $faker-&gt;cantonShort();   // \"GE\"\necho $faker-&gt;cantonName();    // \"Genf\"</code></pre>"},{"location":"locales/de_CH/#fakerproviderde_chpayment","title":"<code>Faker\\Provider\\de_CH\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"CH28167004ZG2ZU4X0H47\"</code></pre>"},{"location":"locales/de_CH/#fakerproviderde_chperson","title":"<code>Faker\\Provider\\de_CH\\Person</code>","text":"<pre><code>// Generates a random AVS13/AHV13 social security number\necho $faker-&gt;avs13(); // \"756.1234.5678.97\" OR\necho $faker-&gt;ahv13(); // \"756.1234.5678.97\"</code></pre>"},{"location":"locales/de_CH/#fakerproviderde_chphonenumber","title":"<code>Faker\\Provider\\de_CH\\PhoneNumber</code>","text":"<pre><code>echo $faker-&gt;mobileNumber(); // \"076 915 37 73\"</code></pre>"},{"location":"locales/de_DE/","title":"German (Germany)","text":""},{"location":"locales/de_DE/#fakerproviderde_depayment","title":"<code>Faker\\Provider\\de_DE\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"DE41849025553661169313\"\necho $faker-&gt;bank(); // \"Volksbank Stuttgart\"</code></pre>"},{"location":"locales/el_CY/","title":"Greek (Cyprus)","text":""},{"location":"locales/el_CY/#fakerproviderel_cypayment","title":"<code>Faker\\Provider\\el_CY\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"CY52603169440XP3ZL20NAZ084I1\"\necho $faker-&gt;bank();              // \"Societe Gererale Cyprus\"</code></pre>"},{"location":"locales/el_CY/#fakerproviderel_cyphonenumber","title":"<code>Faker\\Provider\\el_CY\\PhoneNumber</code>","text":"<pre><code>echo $faker-&gt;mobileNumber(); // \"93585791\"</code></pre>"},{"location":"locales/el_GR/","title":"Greek (Greece)","text":""},{"location":"locales/el_GR/#fakerproviderel_graddress","title":"<code>Faker\\Provider\\el_GR\\Address</code>","text":"<pre><code>echo $faker-&gt;prefecture(); // \"\u0398\u03b5\u03c1\u03bc\u03b1\u03ca\u03ba\u03cc\u03c2\"</code></pre>"},{"location":"locales/el_GR/#fakerproviderel_grcompany","title":"<code>Faker\\Provider\\el_GR\\Company</code>","text":"<pre><code>echo $faker-&gt;doy();    // \"\u0391\u03bc\u03bf\u03c1\u03b3\u03bf\u03cd\"\necho $faker-&gt;object(); // \"\u0394\u03b7\u03bc\u03bf\u03c3\u03b9\u03bf\u03b3\u03c1\u03ac\u03c6\u03bf\u03c2\"</code></pre>"},{"location":"locales/el_GR/#fakerproviderel_grpayment","title":"<code>Faker\\Provider\\el_GR\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"GR173660451Z7ZO3VW6FR8Z99JT\"</code></pre>"},{"location":"locales/el_GR/#fakerproviderel_grphone","title":"<code>Faker\\Provider\\el_GR\\Phone</code>","text":"<pre><code>echo $faker-&gt;mobileNumber();      // \"693 257 1638\"\necho $faker-&gt;fixedLineNumber();   // \"+302158370760\"\necho $faker-&gt;personalNumber();    // \"+30 70 8858 6950\"\necho $faker-&gt;premiumRateNumber(); // \"901 787 7879\"\necho $faker-&gt;sharedCostNumber();  // \"+308065277962\"\necho $faker-&gt;tollFreeNumber();    // \"+30 800 908 3465\"</code></pre>"},{"location":"locales/en_GB/","title":"English (United Kingdom)","text":""},{"location":"locales/en_GB/#fakerprovideren_gbaddress","title":"<code>Faker\\Provider\\en_GB\\Address</code>","text":"<pre><code>echo $faker-&gt;secondaryAddress(); // \"Flat 13\"\necho $faker-&gt;county();           // 'Hampshire'</code></pre>"},{"location":"locales/en_GB/#fakerprovideren_gbcompany","title":"<code>Faker\\Provider\\en_GB\\Company</code>","text":"<pre><code>echo $faker-&gt;vat();                                     // \"GB123 4567 89\"\necho $faker-&gt;vat( Company::VAT_TYPE_BRANCH );           // \"GB123 4567 89 012\"\necho $faker-&gt;vat( Company::VAT_TYPE_GOVERNMENT );       // \"GBGD123\"\necho $faker-&gt;vat( Company::VAT_TYPE_HEALTH_AUTHORITY ); // \"GBHA567\"</code></pre>"},{"location":"locales/en_GB/#fakerprovideren_gbpayment","title":"<code>Faker\\Provider\\en_GB\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"GB28MLRJ42074399970100\"\n\n// Generates a random National Insurance number.\necho $faker-&gt;nino(); // \"TY179309C\"</code></pre>"},{"location":"locales/en_GB/#fakerprovideren_gbphonenumber","title":"<code>Faker\\Provider\\en_GB\\PhoneNumber</code>","text":"<pre><code>echo $faker-&gt;mobileNumber(); // \"07720324489\"</code></pre>"},{"location":"locales/en_HK/","title":"English (Hong Kong SAR China)","text":""},{"location":"locales/en_HK/#fakerprovideren_hkaddress","title":"<code>Faker\\Provider\\en_HK\\Address</code>","text":"<pre><code>// Generates a fake town name based on the words commonly found in Hong Kong\necho $faker-&gt;town(); // \"Yuen Long\"\n\n// Generates a fake village name based on the words commonly found in Hong Kong\necho $faker-&gt;village(); // \"O Tau\"\n\n// Generates a fake estate name based on the words commonly found in Hong Kong\necho $faker-&gt;estate(); // \"Ching Lai Court\"</code></pre>"},{"location":"locales/en_HK/#fakerprovideren_hkphone","title":"<code>Faker\\Provider\\en_HK\\Phone</code>","text":"<pre><code>// Generates a Hong Kong mobile number (starting with 5, 6 or 9)\necho $faker-&gt;mobileNumber(); // \"92150087\"\n\n// Generates a Hong Kong landline number (starting with 2 or 3)\necho $faker-&gt;landlineNumber(); // \"32750132\"\n\n// Generates a Hong Kong fax number (starting with 7)\necho $faker-&gt;faxNumber(); // \"71937729\"</code></pre>"},{"location":"locales/en_IN/","title":"English (India)","text":""},{"location":"locales/en_IN/#fakerprovideren_inaddress","title":"<code>Faker\\Provider\\en_IN\\Address</code>","text":"<pre><code>echo $faker-&gt;locality();     // \"Vaishali Nagar\"\necho $faker-&gt;localityName(); // \"Kharadi\"\necho $faker-&gt;societyName();  // \"Shanti Apartments\"\necho $faker-&gt;state();        // \"Delhi\"\necho $faker-&gt;stateAbbr();    // \"DL\"</code></pre>"},{"location":"locales/en_IN/#fakerprovideren_inphonenumber","title":"<code>Faker\\Provider\\en_IN\\PhoneNumber</code>","text":"<pre><code>echo $faker-&gt;mobileNumber(); // \"09007086397\"</code></pre>"},{"location":"locales/en_NG/","title":"English (Nigeria)","text":""},{"location":"locales/en_NG/#fakerprovideren_ngaddress","title":"<code>Faker\\Provider\\en_NG\\Address</code>","text":"<pre><code>echo $faker-&gt;city(); // 'Edo'\necho $faker-&gt;cityName(); // 'Edo'\necho $faker-&gt;state(); // 'Katsina'\necho $faker-&gt;region(); // 'South-East'\necho $faker-&gt;streetAddress(); // '92 Rev. Oladimeji Way'\necho $faker-&gt;streetName(); // 'Chief Olasunkanmi-fasayo Street'</code></pre>"},{"location":"locales/en_NG/#fakerprovideren_ngperson","title":"<code>Faker\\Provider\\en_NG\\Person</code>","text":"<pre><code>// Generates a random person name\necho $faker-&gt;name(); // 'Oluwunmi Mayowa'</code></pre>"},{"location":"locales/en_NZ/","title":"English (New Zealand)","text":""},{"location":"locales/en_NZ/#fakerprovideren_nzaddress","title":"<code>Faker\\Provider\\en_NZ\\Address</code>","text":"<pre><code>echo $faker-&gt;region(); // \"Auckland\"</code></pre>"},{"location":"locales/en_NZ/#fakerprovideren_nzphone","title":"<code>Faker\\Provider\\en_NZ\\Phone</code>","text":"<pre><code>// Generates a cell (mobile) phone number\necho $faker-&gt;mobileNumber(); // \"021 123 4567\"\n\n// Generates a toll free number\necho $faker-&gt;tollFreeNumber(); // \"0800 123 456\"\n\n// Area Code\necho $faker-&gt;areaCode(); // \"03\"</code></pre>"},{"location":"locales/en_PH/","title":"English (Philippines)","text":""},{"location":"locales/en_PH/#fakerprovideren_phaddress","title":"<code>Faker\\Provider\\en_PH\\Address</code>","text":"<pre><code>echo $faker-&gt;province();     // \"Marinduque\"\necho $faker-&gt;municipality(); // \"Lacub\"\necho $faker-&gt;barangay();     // \"Poblacion\"</code></pre>"},{"location":"locales/en_PH/#fakerprovideren_phphone","title":"<code>Faker\\Provider\\en_PH\\Phone</code>","text":"<pre><code>// Generates a cell (mobile) phone number\necho $faker-&gt;mobileNumber(); // \"+63 (933) 384-1558\"</code></pre>"},{"location":"locales/en_SG/","title":"English (Singapore)","text":""},{"location":"locales/en_SG/#fakerprovideren_sgaddress","title":"<code>Faker\\Provider\\en_SG\\Address</code>","text":"<pre><code>echo $faker-&gt;blockNumber(); // \"Blk 914\"</code></pre>"},{"location":"locales/en_SG/#fakerprovideren_sgperson","title":"<code>Faker\\Provider\\en_SG\\Person</code>","text":"<pre><code>// Generates a National Registration Identity Card (NRIC) number\necho $faker-&gt;nric(); // \"S4098150J\"\n\n// Generates a Foreign Identification Number (FIN)\necho $faker-&gt;fin(); // \"G2325088N\"\n\n// Generates either NRIC or FIN number depending on the second argument\necho $faker-&gt;singaporeId(new \\DateTime('2005-03-01'), $faker-&gt;boolean()); // \"T0550799A\"</code></pre>"},{"location":"locales/en_SG/#fakerprovideren_sgphonenumber","title":"<code>Faker\\Provider\\en_SG\\PhoneNumber</code>","text":"<pre><code>echo $faker-&gt;tollFreeInternationalNumber(); // \"800 520 9659\"\n\necho $faker-&gt;tollFreeLineNumber(); // \"1800 331 6934\"\n\necho $faker-&gt;premiumPhoneNumber(); // \"1900 219 6547\"\n\necho $faker-&gt;mobileNumber(); // \"9207 0603\"\n\necho $faker-&gt;fixedLineNumber(); // \"6752 8659\"\n\necho $faker-&gt;voipNumber(); // \"3384 1228</code></pre>"},{"location":"locales/en_UG/","title":"English (Uganda)","text":""},{"location":"locales/en_UG/#fakerprovideren_ugaddress","title":"<code>Faker\\Provider\\en_UG\\Address</code>","text":"<pre><code>echo $faker-&gt;district(); // \"Kabarole\"\necho $faker-&gt;region();   // \"North\"</code></pre>"},{"location":"locales/en_US/","title":"English (United States)","text":""},{"location":"locales/en_US/#fakerprovideren_uscompany","title":"<code>Faker\\Provider\\en_US\\Company</code>","text":"<pre><code>// Generate a random Employer Identification Number\necho $faker-&gt;ein(); // '12-3456789'</code></pre>"},{"location":"locales/en_US/#fakerprovideren_uspayment","title":"<code>Faker\\Provider\\en_US\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // '51915734310'\necho $faker-&gt;bankRoutingNumber(); // '212240302'</code></pre>"},{"location":"locales/en_US/#fakerprovideren_usperson","title":"<code>Faker\\Provider\\en_US\\Person</code>","text":"<pre><code>// Generates a random Social Security Number\necho $faker-&gt;ssn(); // '123-45-6789'</code></pre>"},{"location":"locales/en_ZA/","title":"English (South Africa)","text":""},{"location":"locales/en_ZA/#fakerprovideren_zacompany","title":"<code>Faker\\Provider\\en_ZA\\Company</code>","text":"<pre><code>// Generates a random company registration number\necho $faker-&gt;companyNumber(); // 1999/789634/01</code></pre>"},{"location":"locales/en_ZA/#fakerprovideren_zaperson","title":"<code>Faker\\Provider\\en_ZA\\Person</code>","text":"<pre><code>// Generates a random national identification number\necho $faker-&gt;idNumber(); // 6606192211041\n\n// Generates a random valid licence code\necho $faker-&gt;licenceCode(); // EB</code></pre>"},{"location":"locales/en_ZA/#fakerprovideren_zaphonenumber","title":"<code>Faker\\Provider\\en_ZA\\PhoneNumber</code>","text":"<pre><code>// Generates a special rate toll free phone number\necho $faker-&gt;tollFreeNumber(); // 0800 555 5555\n\n// Generates a mobile phone number\necho $faker-&gt;mobileNumber(); // 082 123 5555</code></pre>"},{"location":"locales/es_ES/","title":"Spanish (Spain)","text":""},{"location":"locales/es_ES/#fakerprovideres_esperson","title":"<code>Faker\\Provider\\es_ES\\Person</code>","text":"<pre><code>// Generates a Documento Nacional de Identidad (DNI) number\necho $faker-&gt;dni(); // '77446565E'\n\n// Generates a random valid licence code\necho $faker-&gt;licenceCode(); // B</code></pre>"},{"location":"locales/es_ES/#fakerprovideres_espayment","title":"<code>Faker\\Provider\\es_ES\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"ES5285748762396535068585\"\n\n// Generates a C\u00f3digo de identificaci\u00f3n Fiscal (CIF) number\necho $faker-&gt;vat(); // \"A35864370\"</code></pre>"},{"location":"locales/es_ES/#fakerprovideres_esphonenumber","title":"<code>Faker\\Provider\\es_ES\\PhoneNumber</code>","text":"<pre><code>// Generates a special rate toll free phone number\necho $faker-&gt;tollFreeNumber(); // 900 123 456\n\n// Generates a mobile phone number\necho $faker-&gt;mobileNumber(); // +34 612 12 24</code></pre>"},{"location":"locales/es_PE/","title":"Spanish (Peru)","text":""},{"location":"locales/es_PE/#fakerprovideres_peperson","title":"<code>Faker\\Provider\\es_PE\\Person</code>","text":"<pre><code>// Generates a Peruvian Documento Nacional de Identidad (DNI) number\necho $faker-&gt;dni(); // '83367512'</code></pre>"},{"location":"locales/es_PE/#fakerprovideres_pecompany","title":"<code>Faker\\Provider\\es_PE\\Company</code>","text":"<pre><code>// Generates a Peruvian REG. UNICO DE CONTRIBUYENTES (RUC) number\necho $faker-&gt;ruc(); // '20105895410'</code></pre>"},{"location":"locales/es_PE/#fakerprovideres_pecompany_1","title":"<code>Faker\\Provider\\es_PE\\Company</code>","text":"<pre><code>// Generates a Peruvian REG. UNICO DE CONTRIBUYENTES (RUC) number\necho $faker-&gt;ruc(true); // '10105895410'</code></pre>"},{"location":"locales/es_PE/#fakerprovideres_pecompany_2","title":"<code>Faker\\Provider\\es_PE\\Company</code>","text":"<pre><code>// Generates a REG. UNICO DE CONTRIBUYENTES (RUC) number\necho $faker-&gt;ruc(false); // '20105895410'</code></pre>"},{"location":"locales/es_VE/","title":"Spanish (Venezuela)","text":""},{"location":"locales/es_VE/#fakerprovideres_veperson","title":"<code>Faker\\Provider\\es_VE\\Person</code>","text":"<pre><code>// Generate a C\u00e9dula de identidad number, you can pass one argument to add separator\necho $faker-&gt;nationalId(); // 'V11223344'</code></pre>"},{"location":"locales/es_VE/#fakerprovideres_vecompany","title":"<code>Faker\\Provider\\es_VE\\Company</code>","text":"<pre><code>// Generates a R.I.F. number, you can pass one argument to add separators\necho $faker-&gt;taxpayerIdentificationNumber(); // 'J1234567891'</code></pre>"},{"location":"locales/fa_IR/","title":"Persian (Iran)","text":""},{"location":"locales/fa_IR/#fakerproviderfa_irperson","title":"<code>Faker\\Provider\\fa_IR\\Person</code>","text":"<pre><code>// Generates a valid nationalCode\necho $faker-&gt;nationalCode(); // \"0078475759\"</code></pre>"},{"location":"locales/fa_IR/#fakerproviderfa_iraddress","title":"<code>Faker\\Provider\\fa_IR\\Address</code>","text":"<pre><code>// Generates a random building name\necho $faker-&gt;building(); // \"\u0633\u0627\u062e\u062a\u0645\u0627\u0646 \u0622\u0641\u062a\u0627\u0628\"\n\n// Returns a random city name\necho $faker-&gt;city(); // \"\u0627\u0633\u062a\u0627\u0646 \u0632\u0646\u062c\u0627\u0646\"</code></pre>"},{"location":"locales/fa_IR/#fakerproviderfa_ircompany","title":"<code>Faker\\Provider\\fa_IR\\Company</code>","text":"<pre><code>// Generates a random contract type\necho $faker-&gt;contract(); // \"\u0631\u0633\u0645\u06cc\"</code></pre>"},{"location":"locales/fi_FI/","title":"Finnish (Finland)","text":""},{"location":"locales/fi_FI/#fakerproviderfi_fipayment","title":"<code>Faker\\Provider\\fi_FI\\Payment</code>","text":"<pre><code>// Generates a random bank account number\necho $faker-&gt;bankAccountNumber(); // \"FI8350799879879616\"</code></pre>"},{"location":"locales/fi_FI/#fakerproviderfi_fiperson","title":"<code>Faker\\Provider\\fi_FI\\Person</code>","text":"<pre><code>// Generates a valid Finnish personal identity number (in Finnish - Henkil\u00f6tunnus)\necho $faker-&gt;personalIdentityNumber() // '170974-007J'\n\n// Since the numbers are different for male and female persons, optionally you can specify gender.\necho $faker-&gt;personalIdentityNumber(\\DateTime::createFromFormat('Y-m-d', '2015-12-14'), 'female') // '141215A520B'</code></pre>"},{"location":"locales/fr_BE/","title":"French (Belgium)","text":""},{"location":"locales/fr_BE/#fakerproviderfr_beaddress","title":"<code>Faker\\Provider\\fr_BE\\Address</code>","text":"<pre><code>echo $faker-&gt;province(); // \"Brabant wallon\"\necho $faker-&gt;cityName(); // \"La Roche-en-Ardenne\"</code></pre>"},{"location":"locales/fr_BE/#fakerproviderfr_becompany","title":"<code>Faker\\Provider\\fr_BE\\Company</code>","text":"<pre><code>echo $faker-&gt;company(); // \"Timmermans SA\"\necho $faker-&gt;companySuffix(); // \"ASBL\"</code></pre>"},{"location":"locales/fr_BE/#fakerproviderfr_beinternet","title":"<code>Faker\\Provider\\fr_BE\\Internet</code>","text":"<pre><code>echo $faker-&gt;tld(); // \"be\"</code></pre>"},{"location":"locales/fr_BE/#fakerproviderfr_bepayment","title":"<code>Faker\\Provider\\fr_BE\\Payment</code>","text":"<pre><code>// IBAN for a Belgian bank account. Will always start with \"BE\".\necho $faker-&gt;bankAccountNumber(); // \"BE22800006647946\"\n\n// VAT number.\necho $faker-&gt;vat(); // \"BE 0123456789\"\n\n// Same as above but without any space between country code and number.\necho $faker-&gt;vat(false); // \"BE0123456789\"</code></pre>"},{"location":"locales/fr_BE/#fakerproviderfr_beperson","title":"<code>Faker\\Provider\\fr_BE\\Person</code>","text":"<pre><code>echo $faker-&gt;firstNameFemale(); // \"Marion\"\necho $faker-&gt;firstNameMale(); // \"Maxime\"\n\necho $faker-&gt;lastName(); // \"Janssens\"\n\necho $faker-&gt;titleFemale(); // \"Dr.\"\necho $faker-&gt;titleMale(); // \"M.\"</code></pre>"},{"location":"locales/fr_BE/#fakerproviderfr_bephonenumber","title":"<code>Faker\\Provider\\fr_BE\\PhoneNumber</code>","text":"<pre><code>echo $faker-&gt;phoneNumber(); // \"+32(0)2 9398787\"</code></pre>"},{"location":"locales/fr_CH/","title":"French (Switzerland)","text":""},{"location":"locales/fr_CH/#fakerproviderfr_chpayment","title":"<code>Faker\\Provider\\fr_CH\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"CH28167004ZG2ZU4X0H47\"</code></pre>"},{"location":"locales/fr_CH/#fakerproviderfr_chperson","title":"<code>Faker\\Provider\\fr_CH\\Person</code>","text":"<pre><code>// Generates a random AVS13/AHV13 social security number\necho $faker-&gt;avs13(); // \"756.1234.5678.97\"</code></pre>"},{"location":"locales/fr_FR/","title":"French (France)","text":""},{"location":"locales/fr_FR/#fakerproviderfr_fraddress","title":"<code>Faker\\Provider\\fr_FR\\Address</code>","text":"<pre><code>// Generates a random department name\necho $faker-&gt;departmentName(); // \"Haut-Rhin\"\n\n// Generates a random department number\necho $faker-&gt;departmentNumber(); // \"2B\"\n\n// Generates a random department info (department number =&gt; department name)\n$faker-&gt;department(); // ['18' =&gt; 'Cher'];\n\n// Generates a random region\necho $faker-&gt;region(); // \"Saint-Pierre-et-Miquelon\"\n\n// Generates a random appartement, stair\necho $faker-&gt;secondaryAddress(); // \"Bat. 961\"</code></pre>"},{"location":"locales/fr_FR/#fakerproviderfr_frcompany","title":"<code>Faker\\Provider\\fr_FR\\Company</code>","text":"<pre><code>// Generates a random SIREN number\necho $faker-&gt;siren(); // 082 250 104\n\n// Generates a random SIRET number\necho $faker-&gt;siret(); // 347 355 708 00224</code></pre>"},{"location":"locales/fr_FR/#fakerproviderfr_frpayment","title":"<code>Faker\\Provider\\fr_FR\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber; // \"FR982713192809U43A8QR4OJ923\"\n\n// Generates a random VAT\necho $faker-&gt;vat(); // FR 12 123 456 789</code></pre>"},{"location":"locales/fr_FR/#fakerproviderfr_frperson","title":"<code>Faker\\Provider\\fr_FR\\Person</code>","text":"<pre><code>// Generates a random NIR / S\u00e9curit\u00e9 Sociale number\necho $faker-&gt;nir(); // 1 88 07 35 127 571 - 19</code></pre>"},{"location":"locales/fr_FR/#fakerproviderfr_frphonenumber","title":"<code>Faker\\Provider\\fr_FR\\PhoneNumber</code>","text":"<pre><code>// Generates phone numbers\necho $faker-&gt;phoneNumber();   // +33 (0)1 67 97 01 31\necho $faker-&gt;mobileNumber();  // +33 6 21 12 72 84\necho $faker-&gt;serviceNumber(); // 08 98 04 84 46</code></pre>"},{"location":"locales/he_IL/","title":"Hebrew (Israel)","text":""},{"location":"locales/he_IL/#fakerproviderhe_ilpayment","title":"<code>Faker\\Provider\\he_IL\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"IL392237392219429527697\"</code></pre>"},{"location":"locales/hr_HR/","title":"Croatian (Croatia)","text":""},{"location":"locales/hr_HR/#fakerproviderhr_hrpayment","title":"<code>Faker\\Provider\\hr_HR\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"HR3789114847226078672\"</code></pre>"},{"location":"locales/hu_HU/","title":"Hungarian (Hungary)","text":""},{"location":"locales/hu_HU/#fakerproviderhu_huaddress","title":"<code>Faker\\Provider\\hu_HU\\Address</code>","text":"<pre><code>// Generates a random Floor or Door with suffix\necho $faker-&gt;secondaryAddress(); // \"10. emelet\"\n\n// Generates a random state\necho $faker-&gt;state(); // \"Pest\"\n\n// Echo the capital of Hungary\necho $faker-&gt;capital(); // \"Budapest\"\n\n// Generates a random big city\necho $faker-&gt;bigCity(); // \"B\u00e9k\u00e9scsaba\"\n\n// Generates a random small city\necho $faker-&gt;smallerCity(); // \"Ajka\"\n\n// Generates a coordinates inside the border of Hungary\necho $faker-&gt;localCoordinates(); // ['47.049242', '18.355119']</code></pre>"},{"location":"locales/hu_HU/#fakerproviderhu_hucompany","title":"<code>Faker\\Provider\\hu_HU\\Company</code>","text":"<pre><code>// Generates a random company suffix\necho $faker-&gt;companySuffix(); // \"Kft\"</code></pre>"},{"location":"locales/hu_HU/#fakerproviderhu_hupayment","title":"<code>Faker\\Provider\\hu_HU\\Payment</code>","text":"<pre><code>// Generates a random bank account number\necho $faker-&gt;bankAccountNumber(); // \"HU09904437680048220079300783\"</code></pre>"},{"location":"locales/hu_HU/#fakerproviderhu_huperson","title":"<code>Faker\\Provider\\hu_HU\\Person</code>","text":"<pre><code>// Generates a random male first name\necho $faker-&gt;firstNameMale(); // \"Albert\"\n\n// Generates a random female first name\necho $faker-&gt;firstNameFemale(); // \"Ad\u00e9l\"\n\n// Generates a random unisex last name\necho $faker-&gt;lastName(); // \"Antal\"\n\n// Generates a specific Hungarian name format for females after marriage\necho $faker-&gt;lastNameFemaleMarried(); // \"Kissn\u00e9\"\n\n// Generates a random prefix before the name\necho $faker-&gt;title(); // \"Dr.\"\n\n// Replaced by specific unisex hungarian title\necho $faker-&gt;titleMale(); // \"B\u00e1r\u00f3\"\n\n// Replaced by specific unisex hungarian title\necho $faker-&gt;titleFemale(); // \"\u00d6zv.\"\n\n// Echo the PhD suffix\necho $faker-&gt;suffix(); // \"PhD\"</code></pre>"},{"location":"locales/hu_HU/#fakerproviderhu_huphonenumber","title":"<code>Faker\\Provider\\hu_HU\\PhoneNumber</code>","text":"<pre><code>// Generates a random phone number\necho $faker-&gt;phoneNumber(); // \"+36-00-000-0000\"</code></pre>"},{"location":"locales/hu_HU/#fakerproviderhu_hutext","title":"<code>Faker\\Provider\\hu_HU\\Text</code>","text":"<pre><code>// Generates a text\necho $faker-&gt;text(); // \"ELS\u0150 FEJEZET 1 - Uram! A k\u00e9sem\u00e9rt j\u00f6ttem! - Hol hagyta?\"</code></pre>"},{"location":"locales/id_ID/","title":"Indonesian (Indonesia)","text":""},{"location":"locales/id_ID/#fakerproviderid_idperson","title":"<code>Faker\\Provider\\id_ID\\Person</code>","text":"<pre><code>// Generates a random Nomor Induk Kependudukan (NIK)\n\n// first argument is gender, either Person::GENDER_MALE or Person::GENDER_FEMALE, if none specified random gender is used\n// second argument is birth date (DateTime object), if none specified, random birth date is used\necho $faker-&gt;nik(); // \"8522246001570940\"</code></pre>"},{"location":"locales/is_IS/","title":"Icelandic (Iceland)","text":""},{"location":"locales/is_IS/#fakerprovideris_ispayment","title":"<code>Faker\\Provider\\is_IS\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"IS772061465007570166313591\"</code></pre>"},{"location":"locales/it_CH/","title":"Italian (Switzerland)","text":""},{"location":"locales/it_CH/#fakerproviderit_chpayment","title":"<code>Faker\\Provider\\it_CH\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"CH28167004ZG2ZU4X0H47\"</code></pre>"},{"location":"locales/it_CH/#fakerproviderit_chperson","title":"<code>Faker\\Provider\\it_CH\\Person</code>","text":"<pre><code>// Generates a random AVS13/AHV13 social security number\necho $faker-&gt;avs13(); // \"756.1234.5678.97\"</code></pre>"},{"location":"locales/it_IT/","title":"Italian (Italy)","text":""},{"location":"locales/it_IT/#fakerproviderit_itcompany","title":"<code>Faker\\Provider\\it_IT\\Company</code>","text":"<pre><code>// Generates a random VAT ID (partita IVA)\necho $faker-&gt;vat(); // \"IT98746784967\"</code></pre>"},{"location":"locales/it_IT/#fakerproviderit_itpayment","title":"<code>Faker\\Provider\\it_IT\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"IT53H9229628427XEQQOX0CU8Z0\"</code></pre>"},{"location":"locales/it_IT/#fakerproviderit_itperson","title":"<code>Faker\\Provider\\it_IT\\Person</code>","text":"<pre><code>// Generates a random Tax Id code (Codice fiscale)\necho $faker-&gt;taxId(); // \"DIXDPZ44E08F367A\"</code></pre>"},{"location":"locales/ja_JP/","title":"Japanese (Japan)","text":""},{"location":"locales/ja_JP/#fakerproviderja_jpperson","title":"<code>Faker\\Provider\\ja_JP\\Person</code>","text":"<pre><code>// Generates a 'kana' name\necho $faker-&gt;kanaName($gender = null|'male'|'female'); // \"\u30a2\u30aa\u30bf \u30df\u30ce\u30eb\"\n\n// Generates a 'kana' first name\necho $faker-&gt;firstKanaName($gender = null|'male'|'female'); // \"\u30d2\u30c7\u30ad\"\n\n// Generates a 'kana' first name on the male\necho $faker-&gt;firstKanaNameMale(); // \"\u30d2\u30c7\u30ad\"\n\n// Generates a 'kana' first name on the female\necho $faker-&gt;firstKanaNameFemale(); // \"\u30de\u30a2\u30e4\"\n\n// Generates a 'kana' last name\necho $faker-&gt;lastKanaName(); // \"\u30ca\u30ab\u30b8\u30de\"</code></pre>"},{"location":"locales/ka_GE/","title":"Georgian (Georgia)","text":""},{"location":"locales/ka_GE/#fakerproviderka_gepayment","title":"<code>Faker\\Provider\\ka_GE\\Payment</code>","text":"<pre><code>// Generates a random bank account number\necho $faker-&gt;bankAccountNumber(); // \"GE33ZV9773853617253389\"</code></pre>"},{"location":"locales/kk_KZ/","title":"Kazakh (Kazakhstan)","text":""},{"location":"locales/kk_KZ/#fakerproviderkk_kzcompany","title":"<code>Faker\\Provider\\kk_KZ\\Company</code>","text":"<pre><code>// Generates an business identification number\necho $faker-&gt;businessIdentificationNumber(); // \"150140000019\"</code></pre>"},{"location":"locales/kk_KZ/#fakerproviderkk_kzpayment","title":"<code>Faker\\Provider\\kk_KZ\\Payment</code>","text":"<pre><code>// Generates a random bank name\necho $faker-&gt;bank(); // \"\u049a\u0430\u0437\u043a\u043e\u043c\u043c\u0435\u0440\u0446\u0431\u0430\u043d\u043a\"\n\n// Generates a random bank account number\necho $faker-&gt;bankAccountNumber(); // \"KZ1076321LO4H6X41I37\"</code></pre>"},{"location":"locales/kk_KZ/#fakerproviderkk_kzperson","title":"<code>Faker\\Provider\\kk_KZ\\Person</code>","text":"<pre><code>// Generates an individual identification number\necho $faker-&gt;individualIdentificationNumber(); // \"780322300455\"\n\n// Generates an individual identification number based on his/her birth date\necho $faker-&gt;individualIdentificationNumber(new \\DateTime('1999-03-01')); // \"990301300455\"</code></pre>"},{"location":"locales/ko_KR/","title":"Korean (South Korea)","text":""},{"location":"locales/ko_KR/#fakerproviderko_kraddress","title":"<code>Faker\\Provider\\ko_KR\\Address</code>","text":"<pre><code>// Generates a metropolitan city\necho $faker-&gt;metropolitanCity(); // \"\uc11c\uc6b8\ud2b9\ubcc4\uc2dc\"\n\n// Generates a borough\necho $faker-&gt;borough(); // \"\uac15\ub0a8\uad6c\"</code></pre>"},{"location":"locales/ko_KR/#fakerproviderko_krphonenumber","title":"<code>Faker\\Provider\\ko_KR\\PhoneNumber</code>","text":"<pre><code>// Generates a local area phone numer\necho $faker-&gt;localAreaPhoneNumber(); // \"02-1234-4567\"\n\n// Generates a cell phone number\necho $faker-&gt;cellPhoneNumber(); // \"010-9876-5432\"</code></pre>"},{"location":"locales/lt_LT/","title":"Lithuanian (Lithuania)","text":""},{"location":"locales/lt_LT/#fakerproviderlt_ltpayment","title":"<code>Faker\\Provider\\lt_LT\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"LT300848876740317118\"</code></pre>"},{"location":"locales/lv_LV/","title":"Latvian (Latvia)","text":""},{"location":"locales/lv_LV/#fakerproviderlv_lvpayment","title":"<code>Faker\\Provider\\lv_LV\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"LV56XUHF3FI0W5413NIP0\"</code></pre>"},{"location":"locales/lv_LV/#fakerproviderlv_lvperson","title":"<code>Faker\\Provider\\lv_LV\\Person</code>","text":"<pre><code>// Generates a random personal identity card number\necho $faker-&gt;personalIdentityNumber(); // \"140190-12301\"</code></pre>"},{"location":"locales/me_ME/","title":"Montenegrin (Montenegro)","text":""},{"location":"locales/me_ME/#fakerproviderme_mepayment","title":"<code>Faker\\Provider\\me_ME\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"ME62304676623331330300\"</code></pre>"},{"location":"locales/ms_MY/","title":"Malay (Malaysia)","text":""},{"location":"locales/ms_MY/#fakerproviderms_myaddress","title":"<code>Faker\\Provider\\ms_MY\\Address</code>","text":"<pre><code>// Generates a random Malaysian township\necho $faker-&gt;township(); // \"Taman Bahagia\"\n\n// Generates a random Malaysian town address with matching postcode and state\necho $faker-&gt;townState(); // \"55100 Bukit Bintang, Kuala Lumpur\"</code></pre>"},{"location":"locales/ms_MY/#fakerproviderms_mymiscellaneous","title":"<code>Faker\\Provider\\ms_MY\\Miscellaneous</code>","text":"<pre><code>// Generates a random vehicle license plate number\necho $faker-&gt;jpjNumberPlate(); // \"WPL 5169\"</code></pre>"},{"location":"locales/ms_MY/#fakerproviderms_mypayment","title":"<code>Faker\\Provider\\ms_MY\\Payment</code>","text":"<pre><code>// Generates a random Malaysian bank\necho $faker-&gt;bank(); // \"Maybank\"\n\n// Generates a random Malaysian bank account number (10-16 digits)\necho $faker-&gt;bankAccountNumber(); // \"1234567890123456\"\n\n// Generates a random Malaysian insurance company\necho $faker-&gt;insurance(); // \"AIA Malaysia\"\n\n// Generates a random Malaysian bank SWIFT Code\necho $faker-&gt;swiftCode(); // \"MBBEMYKLXXX\"</code></pre>"},{"location":"locales/ms_MY/#fakerproviderms_myperson","title":"<code>Faker\\Provider\\ms_MY\\Person</code>","text":"<pre><code>// Generates a random personal identity card (myKad) number\necho $faker-&gt;myKadNumber($gender = null|'male'|'female', $hyphen = null|true|false); // \"710703471796\"</code></pre>"},{"location":"locales/ms_MY/#fakerproviderms_myphonenumber","title":"<code>Faker\\Provider\\ms_MY\\PhoneNumber</code>","text":"<pre><code>// Generates a random Malaysian mobile number\necho $faker-&gt;mobileNumber($countryCodePrefix = null|true|false, $formatting = null|true|false); // \"+6012-705 3767\"\n\n// Generates a random Malaysian landline number\necho $faker-&gt;fixedLineNumber($countryCodePrefix = null|true|false, $formatting = null|true|false); // \"03-7112 0455\"\n\n// Generates a random Malaysian voip number\necho $faker-&gt;voipNumber($countryCodePrefix = null|true|false, $formatting = null|true|false); // \"015-458 7099\"</code></pre>"},{"location":"locales/nb_NO/","title":"Norwegian Bokm\u00e5l (Norway)","text":""},{"location":"locales/nb_NO/#fakerprovidernb_nomobilenumber","title":"<code>Faker\\Provider\\nb_NO\\MobileNumber</code>","text":"<pre><code>// Generates a random Norwegian mobile phone number\necho $faker-&gt;mobileNumber(); // \"+4799988777\"\necho $faker-&gt;mobileNumber(); // \"999 88 777\"\necho $faker-&gt;mobileNumber(); // \"99988777\"</code></pre>"},{"location":"locales/nb_NO/#fakerprovidernb_nopayment","title":"<code>Faker\\Provider\\nb_NO\\Payment</code>","text":"<pre><code>// Generates a random bank account number\necho $faker-&gt;bankAccountNumber(); // \"NO3246764709816\"</code></pre>"},{"location":"locales/ne_NP/","title":"Nepali (Nepal)","text":""},{"location":"locales/ne_NP/#fakerproviderne_npaddress","title":"<code>Faker\\Provider\\ne_NP\\Address</code>","text":"<pre><code>// Generates a Nepali district name\necho $faker-&gt;district();\n\n// Generates a Nepali city name\necho $faker-&gt;cityName();</code></pre>"},{"location":"locales/nl_BE/","title":"Dutch (Belgium)","text":""},{"location":"locales/nl_BE/#fakerprovidernl_bepayment","title":"<code>Faker\\Provider\\nl_BE\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"BE74249767372336\"\necho $faker-&gt;vat();               // \"BE 0123456789\" - Belgian Value Added Tax number\necho $faker-&gt;vat(false);          // \"BE0123456789\" - unspaced Belgian Value Added Tax number</code></pre>"},{"location":"locales/nl_BE/#fakerprovidernl_beperson","title":"<code>Faker\\Provider\\nl_BE\\Person</code>","text":"<pre><code>echo $faker-&gt;rrn();         // \"83051711784\" - Belgian Rijksregisternummer\necho $faker-&gt;rrn('female'); // \"50032089858\" - Belgian Rijksregisternummer for a female</code></pre>"},{"location":"locales/nl_NL/","title":"Dutch (Netherlands)","text":""},{"location":"locales/nl_NL/#fakerprovidernl_nlcompany","title":"<code>Faker\\Provider\\nl_NL\\Company</code>","text":"<pre><code>echo $faker-&gt;jobTitle(); // \"Houtbewerker\"\necho $faker-&gt;vat(); // \"NL123456789B01\" - Dutch Value Added Tax number\necho $faker-&gt;btw(); // \"NL123456789B01\" - Dutch Value Added Tax number (alias)</code></pre>"},{"location":"locales/nl_NL/#fakerprovidernl_nlpayment","title":"<code>Faker\\Provider\\nl_NL\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"NL74MNEJ4830302492\"</code></pre>"},{"location":"locales/nl_NL/#fakerprovidernl_nlperson","title":"<code>Faker\\Provider\\nl_NL\\Person</code>","text":"<pre><code>echo $faker-&gt;idNumber(); // \"111222333\" - Dutch Personal identification number (BSN)</code></pre>"},{"location":"locales/pl_PL/","title":"Polish (Poland)","text":""},{"location":"locales/pl_PL/#fakerproviderpl_plperson","title":"<code>Faker\\Provider\\pl_PL\\Person</code>","text":"<pre><code>// Generates a random PESEL number\necho $faker-&gt;pesel(); // \"40061451555\"\n// Generates a random personal identity card number\necho $faker-&gt;personalIdentityNumber(); // \"AKX383360\"\n// Generates a random taxpayer identification number (NIP)\necho $faker-&gt;taxpayerIdentificationNumber(); // '8211575109'</code></pre>"},{"location":"locales/pl_PL/#fakerproviderpl_plcompany","title":"<code>Faker\\Provider\\pl_PL\\Company</code>","text":"<pre><code>// Generates a random REGON number\necho $faker-&gt;regon(); // \"714676680\"\n// Generates a random local REGON number\necho $faker-&gt;regonLocal(); // \"15346111382836\"</code></pre>"},{"location":"locales/pl_PL/#fakerproviderpl_plpayment","title":"<code>Faker\\Provider\\pl_PL\\Payment</code>","text":"<pre><code>// Generates a random bank name\necho $faker-&gt;bank(); // \"Narodowy Bank Polski\"\n// Generates a random bank account number\necho $faker-&gt;bankAccountNumber(); // \"PL14968907563953822118075816\"</code></pre>"},{"location":"locales/pl_PL/#fakerproviderpl_pllicenseplate","title":"<code>Faker\\Provider\\pl_PL\\LicensePlate</code>","text":"<pre><code>&lt;?php\n// Generates a random Polish civil vehicle registration number\necho $faker-&gt;licensePlate(); // \"SO 4429E\"\necho $faker-&gt;licensePlate(false); // \"BKL YP21\"\n// Generates a random Polish vehicle registration number including civil, army and services plates\necho $faker-&gt;licensePlate(true); // \"CBY 0874H\", \"HPF N2LV\"\n// Generates a random Polish vehicle registration number for specific voivodeships\necho $faker-&gt;licensePlate(false, ['zachodniopomorskie', '\u015bwi\u0119tokrzyskie']); // \"ZGY 35807\"\n// Generates a random Polish vehicle registration number for specific counties\necho $faker-&gt;licensePlate(false, ['warmi\u0144sko-mazurskie'], ['nidzicki', 'olecki']); // \"NOE 35807\"\n// Generates a random Polish license plate of Border Service or Police\necho $faker-&gt;licensePlate(true, ['services'], ['Stra\u017c Graniczna', 'Policja']); // \"HWA NB41\", \"HPG 806HV\"\n// Generates a random Polish army license plate\necho $faker-&gt;licensePlate(true, ['army']); // \"UG 822PC\"</code></pre>"},{"location":"locales/pt_BR/","title":"Portuguese (Brazil)","text":""},{"location":"locales/pt_BR/#fakerproviderpt_braddress","title":"<code>Faker\\Provider\\pt_BR\\Address</code>","text":"<pre><code>// Generates a random region name\necho $faker-&gt;region(); // 'Nordeste'\n\n// Generates a random region abbreviation\necho $faker-&gt;regionAbbr(); // 'NE'</code></pre>"},{"location":"locales/pt_BR/#fakerproviderpt_brphonenumber","title":"<code>Faker\\Provider\\pt_BR\\PhoneNumber</code>","text":"<pre><code>echo $faker-&gt;areaCode();  // 21\necho $faker-&gt;cellphone(); // 9432-5656\necho $faker-&gt;landline();  // 2654-3445\necho $faker-&gt;phone();     // random landline, 8-digit or 9-digit cellphone number\n\n// Using the phone functions with a false argument returns unformatted numbers\necho $faker-&gt;cellphone(false); // 74336667\n\n// cellphone() has a special second argument to add the 9th digit. Ignored if generated a Radio number\necho $faker-&gt;cellphone(true, true); // 98983-3945 or 7343-1290\n\n// Using the \"Number\" suffix adds area code to the phone\necho $faker-&gt;cellphoneNumber();     // (11) 98309-2935\necho $faker-&gt;landlineNumber(false); // 3522835934\necho $faker-&gt;phoneNumber();         // formatted, random landline or cellphone (obeying the 9th digit rule)\necho $faker-&gt;phoneNumberCleared();  // not formatted, random landline or cellphone (obeying the 9th digit rule)</code></pre>"},{"location":"locales/pt_BR/#fakerproviderpt_brpayment","title":"<code>Faker\\Provider\\pt_BR\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"BR0506997786328342762640926MO\"</code></pre>"},{"location":"locales/pt_BR/#fakerproviderpt_brperson","title":"<code>Faker\\Provider\\pt_BR\\Person</code>","text":"<pre><code>// The name generator may include double first or double last names, plus title and suffix\necho $faker-&gt;name(); // 'Sr. Luis Adriano Sep\u00falveda Filho'\n\n// Valid document generators have a boolean argument to remove formatting\necho $faker-&gt;cpf();      // '145.343.345-76'\necho $faker-&gt;cpf(false); // '45623467866'\necho $faker-&gt;rg();       // '84.405.736-3'\necho $faker-&gt;rg(false);  // '844057363'</code></pre>"},{"location":"locales/pt_BR/#fakerproviderpt_brcompany","title":"<code>Faker\\Provider\\pt_BR\\Company</code>","text":"<pre><code>// Generates a Brazilian formatted and valid CNPJ\necho $faker-&gt;cnpj();      // '23.663.478/0001-24'\necho $faker-&gt;cnpj(false); // '23663478000124'</code></pre>"},{"location":"locales/pt_PT/","title":"Portuguese (Portugal)","text":""},{"location":"locales/pt_PT/#fakerproviderpt_ptperson","title":"<code>Faker\\Provider\\pt_PT\\Person</code>","text":"<pre><code>// Generates a random taxpayer identification number (in portuguese - N\u00famero de Identifica\u00e7\u00e3o Fiscal NIF)\necho $faker-&gt;taxpayerIdentificationNumber(); // '165249277'</code></pre>"},{"location":"locales/pt_PT/#fakerproviderpt_ptpayment","title":"<code>Faker\\Provider\\pt_PT\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"PT54276294522742987131120\"</code></pre>"},{"location":"locales/ro_MD/","title":"Romanian (Moldova)","text":""},{"location":"locales/ro_MD/#fakerproviderro_mdpayment","title":"<code>Faker\\Provider\\ro_MD\\Payment</code>","text":"<pre><code>// Generates a random bank account number\necho $faker-&gt;bankAccountNumber(); // \"MD83BQW1CKMUW34HBESDP3A8\"</code></pre>"},{"location":"locales/ro_RO/","title":"Romanian (Romania)","text":""},{"location":"locales/ro_RO/#fakerproviderro_ropayment","title":"<code>Faker\\Provider\\ro_RO\\Payment</code>","text":"<pre><code>// Generates a random bank account number\necho $faker-&gt;bankAccountNumber(); // \"RO55WRJE3OE8X3YQI7J26U1E\"</code></pre>"},{"location":"locales/ro_RO/#fakerproviderro_roperson","title":"<code>Faker\\Provider\\ro_RO\\Person</code>","text":"<pre><code>// Generates a random male name prefix/title\necho $faker-&gt;prefixMale(); // \"ing.\"\n// Generates a random female name prefix/title\necho $faker-&gt;prefixFemale(); // \"d-na.\"\n// Generates a random male first name\necho $faker-&gt;firstNameMale(); // \"Adrian\"\n// Generates a random female first name\necho $faker-&gt;firstNameFemale(); // \"Miruna\"\n\n// Generates a random Personal Numerical Code (CNP)\necho $faker-&gt;cnp(); // \"2800523081231\"\n// Valid option values:\n//    $gender: null (random), male, female\n//    $dateOfBirth (1800+): null (random), Y-m-d, Y-m (random day), Y (random month and day)\n//          i.e. '1981-06-16', '2015-03', '1900'\n//    $county: 2 letter ISO 3166-2:RO county codes and B1, B2, B3, B4, B5, B6 for Bucharest's 6 sectors\n//    $isResident true/false flag if the person resides in Romania\necho $faker-&gt;cnp($gender = null, $dateOfBirth = null, $county = null, $isResident = true);</code></pre>"},{"location":"locales/ro_RO/#fakerproviderro_rophonenumber","title":"<code>Faker\\Provider\\ro_RO\\PhoneNumber</code>","text":"<pre><code>// Generates a random toll-free phone number\necho $faker-&gt;tollFreePhoneNumber(); // \"0800123456\"\n// Generates a random premium-rate phone number\necho $faker-&gt;premiumRatePhoneNumber(); // \"0900123456\"</code></pre>"},{"location":"locales/ru_RU/","title":"Russian (Russia)","text":""},{"location":"locales/ru_RU/#fakerproviderru_rupayment","title":"<code>Faker\\Provider\\ru_RU\\Payment</code>","text":"<pre><code>// Generates a Russian bank name (based on list of real russian banks)\necho $faker-&gt;bank(); // \"\u041e\u0422\u041f \u0411\u0430\u043d\u043a\"\n\n// Generate a Russian Tax Payment Number for Company\necho $faker-&gt;inn10(); //  7813540735\n\n// Generate a Russian Tax Code for Company\necho $faker-&gt;kpp(); // 781301001</code></pre>"},{"location":"locales/sk_SK/","title":"Slovak (Slovakia)","text":""},{"location":"locales/sk_SK/#fakerprovidersk_skpayment","title":"<code>Faker\\Provider\\sk_SK\\Payment</code>","text":"<pre><code>// Generates a random bank account number\necho $faker-&gt;bankAccountNumber(); // \"SK6413578310194914530894\"</code></pre>"},{"location":"locales/sl_SI/","title":"Slovenian (Slovenia)","text":""},{"location":"locales/sl_SI/#fakerprovidersl_sipayment","title":"<code>Faker\\Provider\\sl_SI\\Payment</code>","text":"<pre><code>// Generates a random bank account number\necho $faker-&gt;bankAccountNumber(); // \"SI54033367976489565\"</code></pre>"},{"location":"locales/sr_Cyrl_RS/","title":"Serbian (Cyrillic, Serbia)","text":""},{"location":"locales/sr_Cyrl_RS/#fakerprovidersr_cyrl_rspayment","title":"<code>Faker\\Provider\\sr_Cyrl_RS\\Payment</code>","text":"<pre><code>// Generates a random bank account number\necho $faker-&gt;bankAccountNumber(); // \"RS67272104347913868782\"</code></pre>"},{"location":"locales/sr_Latn_RS/","title":"Serbian (Latin, Serbia)","text":""},{"location":"locales/sr_Latn_RS/#fakerprovidersr_latn_rspayment","title":"<code>Faker\\Provider\\sr_Latn_RS\\Payment</code>","text":"<pre><code>// Generates a random bank account number\necho $faker-&gt;bankAccountNumber(); // \"RS67272104347913868782\"</code></pre>"},{"location":"locales/sr_RS/","title":"Serbian (Serbia)","text":""},{"location":"locales/sr_RS/#fakerprovidersr_rspayment","title":"<code>Faker\\Provider\\sr_RS\\Payment</code>","text":"<pre><code>// Generates a random bank account number\necho $faker-&gt;bankAccountNumber(); // \"RS67272104347913868782\"</code></pre>"},{"location":"locales/sv_SE/","title":"Swedish (Sweden)","text":""},{"location":"locales/sv_SE/#fakerprovidersv_sepayment","title":"<code>Faker\\Provider\\sv_SE\\Payment</code>","text":"<pre><code>// Generates a random bank account number\necho $faker-&gt;bankAccountNumber(); // \"SE5018548608468284909192\"</code></pre>"},{"location":"locales/sv_SE/#fakerprovidersv_seperson","title":"<code>Faker\\Provider\\sv_SE\\Person</code>","text":"<pre><code>// Generates a valid Swedish personal identity number (in Swedish - Personnummer)\necho $faker-&gt;personalIdentityNumber(); // '950910-0799'\n\n// Since the numbers are different for male and female persons, optionally you can specify gender.\necho $faker-&gt;personalIdentityNumber('female'); // '950910-0781'</code></pre>"},{"location":"locales/sv_SE/#fakerprovidersv_semobilenumber","title":"<code>Faker\\Provider\\sv_SE\\MobileNumber</code>","text":"<pre><code>// Generates a random Swedish mobile phone number\necho $faker-&gt;mobileNumber(); // \"+467########\"\necho $faker-&gt;mobileNumber(); // \"+46(0)7########\"\necho $faker-&gt;mobileNumber(); // \"+46 (0)7## ## ## ##\"\necho $faker-&gt;mobileNumber(); // \"+46 (0)7## ### ###\"\necho $faker-&gt;mobileNumber(); // \"07########\"\necho $faker-&gt;mobileNumber(); // \"07## ## ## ##\"\necho $faker-&gt;mobileNumber(); // \"07## ### ###\"</code></pre>"},{"location":"locales/sv_SE/#publishable-and-gdpr-safe-number-series","title":"Publishable and GDPR safe number series","text":"<p>The Swedish Post and Telecom Authority (PTS) has reserved a series of numbers that are safe to use in relation to European GDPR laws. The numbers will never be used by any subscriber wich also makes them safe to publish in books, movies, TV series etc. </p> <pre><code>//Publishable Swedish mobile phone number series\necho '070-1740' . $faker-&gt;faker-&gt;numberBetween(605, 699);\n\n//Publishable Swedish landline phone number series\necho '031-3900' . $faker-&gt;numberBetween(600, 699);\necho '040-6280' . $faker-&gt;numberBetween(400, 499);\necho '08-46500' . $faker-&gt;numberBetween(400, 499);\necho '0980-319' . $faker-&gt;numberBetween(200, 299);</code></pre>"},{"location":"locales/tr_TR/","title":"Turkish (Turkey)","text":""},{"location":"locales/tr_TR/#fakerprovidertr_trpayment","title":"<code>Faker\\Provider\\tr_TR\\Payment</code>","text":"<pre><code>echo $faker-&gt;bankAccountNumber(); // \"TR10701615J9D2W2U91686NSE1\"</code></pre>"},{"location":"locales/tr_TR/#fakerprovidertr_trperson","title":"<code>Faker\\Provider\\tr_TR\\Person</code>","text":"<pre><code>//Generates a valid Turkish identity number (in Turkish - T.C. Kimlik No)\necho $faker-&gt;tcNo(); // '55300634882'</code></pre>"},{"location":"locales/uk_UA/","title":"Ukrainian (Ukraine)","text":""},{"location":"locales/uk_UA/#fakerprovideruk_uapayment","title":"<code>Faker\\Provider\\uk_UA\\Payment</code>","text":"<pre><code>// Generates an Ukraine bank name (based on list of real Ukraine banks)\necho $faker-&gt;bank(); // \"\u041e\u0449\u0430\u0434\u0431\u0430\u043d\u043a\"</code></pre>"},{"location":"locales/zh_Hans_CN/","title":"Chinese (Simplified, China)","text":""},{"location":"locales/zh_Hans_CN/#fakerproviderzh_cnpayment","title":"<code>Faker\\Provider\\zh_CN\\Payment</code>","text":"<pre><code>// Generates a random bank name (based on list of real chinese banks)\necho $faker-&gt;bank(); // '\u4e2d\u56fd\u5efa\u8bbe\u94f6\u884c'</code></pre>"},{"location":"locales/zh_Hant_TW/","title":"Chinese (Traditional, Taiwan)","text":""},{"location":"locales/zh_Hant_TW/#fakerproviderzh_twperson","title":"<code>Faker\\Provider\\zh_TW\\Person</code>","text":"<pre><code>// Generates a random personal identify number\necho $faker-&gt;personalIdentityNumber(); // A223456789</code></pre>"},{"location":"locales/zh_Hant_TW/#fakerproviderzh_twcompany","title":"<code>Faker\\Provider\\zh_TW\\Company</code>","text":"<pre><code>// Generates a random VAT / Company Tax number\necho $faker-&gt;VAT(); //23456789</code></pre>"}]}